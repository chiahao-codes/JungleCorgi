<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/head.ejs') %>
</head>

<body id="ticker_body" class="body">
    <header class="headerBox">
        <h2 contenteditable></h2>
    </header>

    <section id="stock_price_container">
        <div id="home-chart-container">
            <div id="home-price-container">
                <div id="home_link_container">
                    <a href="<%=CURR_DOMAIN%>" target="_self">Home</a>
                    <span id="arrow">></span>
                    <span id="symbol">
                        <% let symb="" %>
                            <% if(symbol){ %>
                                <% symb=symbol%>
                                    <% }%>
                                        <%=symb%>
                    </span>
                </div>
                <div id="price-insight-container">
                    <div id="price_hours_container">
                        <h5 id="company_name">
                            <% let name="" %>
                                <% if(shortName){ %>
                                    <% name=shortName %>
                                        <% if(longName){ %>
                                            <% name=longName %>
                                                <% }} %>
                                                    <%= name %>
                        </h5>
                        <div id="price_time_container">
                            <div id="reg_container" class="reg_after_container">
                                <div id="reg_hours_container" class="reg_hours_container">
                                    <h3 id="reg_hours_price" class="price">

                                    </h3>
                                    <div id="reg_hours_pct_container" class="hours_pct_container">
                                        <h5 id="reg_hours_change" class="price">

                                        </h5>
                                        <h5 id="reg_hours_pct" class="price">

                                        </h5>
                                    </div>
                                </div>
                                <div id="at_close_container" class="trading_hours_container">
                                    <h6 id="at_close_txt"></h6>
                                    <h6 id="at_close_time"></h6>
                                </div>
                            </div>
                            <div id="after_container" class="reg_after_container">
                                <div id="after_hours_pp_container" class="reg_hours_container">
                                    <h5 id="after_hours_price" class="price">

                                    </h5>
                                    <div id="after_hours_pct_container" class="hours_pct_container">
                                        <h6 id="after_hours_change" class="price">

                                        </h6>
                                        <h6 id="after_hours_pct" class="price">
                                        </h6>
                                    </div>
                                </div>
                                <div id="after_hours_time_container" class="trading_hours_container">
                                    <h6 id="after_hours_txt"></h6>
                                    <h6 id="after_hours_time"></h6>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="insights-container">
                        <h5 id="article-title"></h5>
                        <div id="source-time-container">
                            <h6 id="article-source"><a id="article-link" href="" target="_blank">
                                </a></h6>
                            <div id="article-time"></div>
                        </div>
                    </div>
                </div>

            </div>
            <div id="chart_container">
                <div id="progress-bar-container">
                    <div id="progress-bar" style="--width:35">Loading...</div>
                </div>
                <div id="not-available-container">
                    <div id="not-available">Chart Not Available</div>
                </div>
                <canvas id="chart" class="charts"></canvas>
            </div>
        </div>
        <div id="chart-timeline-container">
            <h6 id="1d" class="timeline-link ">1D</h6>
            <h6 id="5d" class="timeline-link ">5D</h6>
            <h6 id="1mo" class="timeline-link">1M</h6>
            <h6 id="YTD" class="timeline-link">YTD</h6>
            <h6 id="2y" class="timeline-link">2Y</h6>
        </div>
        </div>
        <section id="index_data_container" class="index_data_container">
            <div id="index-data-kids-container">
                <div id="ratio-container" class="index-data-kids">

                    <div class="border-line">
                        <div id="fwdPeRatio">Forward P/E</div>
                        <div id="fwdPeRatioData" class="indexData">
                        </div>
                    </div>

                    <div class="border-line">
                        <div id="ttmPeRatio">P/E (TTM)</div>
                        <div id="ttmPeRatioData" class="indexData">
                        </div>
                    </div>
                    <div class="border-line">
                        <div id="revGrow">Revenue Growth</div>
                        <div id="revGrowData" class="indexData">
                        </div>
                    </div>
                    <div class="border-line">
                        <div id="ebitMarg">Ebitda Margin</div>

                        <div id="ebitMarginData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="curr-ratio">Current Ratio</div>
                        <div id="currRatioData" class="indexData">
                        </div>
                    </div>
                    <div class="border-line">
                        <div id="quick-ratio">Quick Ratio</div>

                        <div id="quickRatioData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="debt-ratio">Debt-to-Equity Ratio</div>

                        <div id="debtRatioData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="retEqu">Return On Equity</div>

                        <div id="retEquData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="op-Margin">Operating Margin</div>

                        <div id="opMarginData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="prof-Margin">Profit Margin</div>

                        <div id="profMarginData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="grossMargin">Gross Margin</div>

                        <div id="grossMarginData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="dividend">Dividend Rate</div>


                        <div id="dividendRateData" class="indexData div-rate">

                        </div>
                    </div>
                    <div class="border-line no-border-bottom">
                        <div id="exDividend">Ex-Dividend Date</div>

                        <div id="exDividendData" class="indexData exDivDate">

                        </div>
                    </div>
                </div>
                <div id="prev-close-container" class="index-data-kids">
                    <div class="border-line">
                        <div id="prevClose">Previous Close</div>

                        <div id="prevClosData" class="indexData commas">
                        </div>
                    </div>
                    <div class="border-line">
                        <div id="open">Market Open</div>

                        <div id="openData" class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="dayLow">Day's Low</div>

                        <div id="dayLowData" class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="dayHigh">Day's High</div>

                        <div id="dayHighData" class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="fifty2WkLow">52 Week Low</div>

                        <div id="fifty2WkLowData" class="indexData commas">
                        </div>
                    </div>
                    <div class="border-line">
                        <div id="fifty2WkHigh">52 Week High</div>

                        <div id="fifty2WkHighData" class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="twoHundDayAvg">200 Day Avg</div>

                        <div id="twoHundDayAvgData" class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id='bid'>Bid</div>

                        <div id='bidData' class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="ask">Ask</div>


                        <div id="askData" class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="beta">Beta</div>

                        <div id="betaData" class="indexData commas">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="mktCap">Market Cap</div>

                        <div id="mktCapData" class="indexData">

                        </div>
                    </div>
                    <div class="border-line">
                        <div id="volume">Volume</div>

                        <div id="volumeData" class="indexData commas volume">

                        </div>
                    </div>
                    <div class="border-line no-border-bottom">
                        <div id="avgVolume">Avg. 10 Day Vol.</div>

                        <div id="avgVolData" class="indexData commas volume">

                        </div>
                    </div>
                </div>
        </section>
        <section id="slide-container">
            <!-- If we need navigation buttons -->
            <div id="nav-buttons-container">
                <div class="slide-prev chevrons">
                    <img id='left-chev' src="/icons8-back-20.png" alt="left-chevron">
                </div>
                <div class="slide-next chevrons">
                    <img id="right-chev" src="/icons8-forward-20.png" alt="right-chevron">
                </div>
            </div>
            <!-- Slides -->
            <div class="slides-wrapper">
                <div id="income-statement" class="slide">
                    <h6>Income Statement</h6>
                    <div class="annual-label">Annual</div>
                    <div class="slide-boxes">
                        <div class="slide-data-wrapper income-slide-years slide-years">
                            <div class="slide-data slide-headers data-align-left currency">

                            </div>
                            <div class="slide-data slide-headers ttm">TTM
                            </div>
                            <div id="income-slide-yr1" class="slide-data slide-headers year1 endingyr1">

                            </div>
                            <div id="income-slide-yr2" class="slide-data slide-headers year2 endingyr2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper total-revenue">
                            <div class="slide-data data-align-left">
                                Revenue</div>
                            <div class="slide-data  ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper gross-profit">
                            <div class="slide-data data-align-left">Gross profit</div>

                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper operating-expense">
                            <div class="slide-data data-align-left">Operating exp.</div>

                            <div class="slide-data  ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper operating-income">

                            <div class="slide-data data-align-left">
                                Operating income</div>
                            <div class="slide-data  ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper pre-tax-income">
                            <div class="slide-data data-align-left">Pre tax income</div>
                            <div class="slide-data  ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper other-income-expense">
                            <div class="slide-data data-align-left">Other expense</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>

                        <div class="slide-data-wrapper basic-eps">
                            <div class="slide-data data-align-left">Basic eps</div>

                            <div class="slide-data  ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper net-income">
                            <div class="slide-data data-align-left">Net income</div>

                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>

                    </div>
                </div>
                <div id="balance-sheet" class="slide">
                    <h6>Balance Sheet</h6>
                    <div class="annual-label">Annual</div>
                    <div class="slide-boxes">
                        <div class="slide-data-wrapper balance-slide-years slide-years">

                            <div class="slide-data slide-headers data-align-left currency">

                            </div>

                            <div class="slide-data slide-headers year1 endingyr1">

                            </div>
                            <div class="slide-data slide-headers year2 endingyr2">

                            </div>
                            <div class="slide-data slide-headers year3 endingyr3">

                            </div>
                        </div>
                        <div class="slide-data-wrapper total-assets">
                            <div class="slide-data data-align-left">Total assets</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>
                        <div class="slide-data-wrapper total-liab">
                            <div class="slide-data data-align-left">Total liab.</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>
                        <div class="slide-data-wrapper total-equity">
                            <div class="slide-data data-align-left">Total equity</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>
                        <div class="slide-data-wrapper current-debt">
                            <div class="slide-data data-align-left">Current debt</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>
                        <div class="slide-data-wrapper long-term-debt">
                            <div class="slide-data data-align-left">Long term debt</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>
                        <div class="slide-data-wrapper accts-receive">
                            <div class="slide-data data-align-left">Accts. receivable</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>
                        <div class="slide-data-wrapper accts-pay">
                            <div class="slide-data data-align-left">Accts. payable</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>

                        <div class="slide-data-wrapper retained-earn">
                            <div class="slide-data data-align-left">Ret. Earnings</div>

                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                            <div class="slide-data year3">

                            </div>
                        </div>
                    </div>
                </div>
                <div id="cash-flow" class="slide">
                    <h6>Cash Flow</h6>
                    <div class="annual-label">Annual</div>
                    <div id="cashflow-slide-boxes" class="slide-boxes">
                        <div class="slide-data-wrapper slide-years cash-flow-slide-years">
                            <div class="slide-data slide-headers data-align-left currency">

                            </div>
                            <div class="slide-data slide-headers ttm">TTM</div>
                            <div class="slide-data slide-headers year1 endingyr1">

                            </div>
                            <div class="slide-data slide-headers year2 endingyr2">

                            </div>
                        </div>

                        <div class="slide-data-wrapper operating-cash-flow">
                            <div class="slide-data data-align-left">Operating cash</div>

                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper investing-cash-flow">
                            <div class="slide-data data-align-left">Investing cash</div>

                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper cash-dividends-paid">

                            <div class="slide-data data-align-left">
                                Cash dividends
                            </div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper end-cash-position">

                            <div class="slide-data data-align-left">
                                End cash pos.</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper capital-expenditure">


                            <div class="slide-data data-align-left">
                                Capital exp.
                            </div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper common-stock-iss">

                            <div class="slide-data data-align-left">
                                Common stock</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper repayment-of-debt">

                            <div class="slide-data data-align-left">
                                Repay debt</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper free-cash-flow">

                            <div class="slide-data data-align-left">
                                Free cash flow</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </section>
        <div id="summary_profile_container">
            <div id="summary_container">
                <h6>Summary</h6>
                <p id="company_desc">

                </p>
            </div>
            <div id="profile_container">

                </h6>
                <div id="profile_container2">
                    <div id="address_container">
                        <div id="address-header">
                            <h6>Address</h6>
                        </div>
                        <p id="address" class="address-details">

                        </p>
                        <div id="city_state_container" class="address-details">
                            <p id="city">

                            </p>
                            <p id="state">

                            </p>
                        </div>
                        <p id="country" class="address-details">

                        </p>

                        <a id="website-link" href="" target="_blank" class="address-details">
                        </a>

                    </div>
                    <div id="ceo-employee-container">
                        <div id="title-parent" class="ceo-employee">
                            <h6>CEO:</h6>
                            <p id="ceo">
                            </p>
                        </div>

                        <div id="employees-parent" class="ceo-employee">
                            <h6>Full-Time Employees:</h6>
                            <p id="full_time_employees">
                            </p>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </section>
    <footer id="ticker_footer">
        <%- include('./partials/footer.ejs') %>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
        const pageUrl = window.location.href;
        localStorage.setItem("url", pageUrl);
        const stockTicker = '<%=symbol%>';
        const quoteType = '<%=quoteType%>';
        const KEY = '<%=API_KEY%>';
        const HOST = '<%=RAPID%>';
        const NEWS = '<%=NEWS%>'
        let quote = '<%=quote%>';
        let realElemStock = '<%=realElemStock%>'
        const apiOptions = {
            method: "GET",
            headers: {
                "x-rapidapi-key": KEY,
                "x-rapidapi-host": HOST,
            },
        };

        const realApiOptions = {
            method: "GET",
            headers: {
                "x-rapidapi-key": KEY,
                "x-rapidapi-host": NEWS,
            },
        }

        //for keyboard key values
        const regExp = /[a-zA-Z.^]/;
        const regExNums = /[0-9]/;

        const h2Box = document.querySelector("header>h2");
        const h2ChildNodes = h2Box.childNodes;
        const selection = window.getSelection();
        const regularHoursContainer = document.getElementById("reg_container");
        const pricePctContainers = document.querySelectorAll(".reg_hours_container");
        const regularPrice = document.getElementById("reg_hours_price");
        const regPointsPctContainer = document.querySelector("#reg_hours_pct_container");
        const afterHrsPrice = document.getElementById("after_hours_price");
        const afterPointsPctContainer = document.querySelector("#after_hours_pct_container");
        const afterHrsChange = document.getElementById("after_hours_change");
        const afterHrsPct = document.getElementById("after_hours_pct");
        const afterHoursContainer = document.querySelector("#after_container");
        const atCloseContainer = document.querySelector("#at_close_container");
        const afterHoursTimeContainer = document.querySelector("#after_hours_time_container");
        const pricesAndPercents = document.querySelectorAll(".price");
        const previousCloseElem = document.getElementById("prevClosData");
        const summaryProfileContainer = document.querySelector("#summary_profile_container");
        const companyDesc = document.querySelector("#company_desc");
        const ratioContainer = document.querySelector("#ratio-container");
        const prevCloseContainer = document.querySelector("#prev-close-container");
        const commas = document.querySelectorAll("#index_data_container > div > .border-line > .commas");
        const chartTimelineContainer = document.querySelector("#chart-timeline-container");
        const canvas = document.querySelector("#chart");
        let chart, finCurrency, timeoutId, currMktState, timeout = undefined, timeout2 = undefined, red = "#b11e31", green = "#148a61", afterHoursPrice;

        const progressBarContainer = document.getElementById('progress-bar-container');
        const progressBar = document.getElementById('progress-bar');

        const slideContainer = document.getElementById("slide-container");
        const slidesWrapper = document.querySelector('.slides-wrapper');
        const slides = Array.from(document.querySelectorAll(".slide"));
        const slideNavChevrons = Array.from(document.querySelectorAll(".chevrons"));
        let checkStmtProp = (property) => {
            return property && property.reportedValue.fmt
                ? property.reportedValue.fmt
                : "n/a";
        };
        //starting variables;
        let isDragging = false, startPosition = 0, currTranslateX = 0, prevTranslateX = 0, animationId = 0, currSlideIndex = 0;
        let previousClose = "",
            regularMarketPrice = "";
        const changePctPointsColor = (currentPrice, prevClosePrice) => {
            let commaRegExp = /[,]/g;
            let afterPrice = afterHrsPrice.innerText;

            if (commaRegExp.test(currentPrice)) {
                //remove commas
                currentPrice = currentPrice.replace(commaRegExp, "");
            }
            if (commaRegExp.test(prevClosePrice)) {
                //remove commas
                prevClosePrice = prevClosePrice.replace(commaRegExp, "");
            }
            if (commaRegExp.test(afterPrice)) {
                afterPrice = afterPrice.replace(commaRegExp, "");
            }

            currentPrice = parseFloat(currentPrice);
            prevClosePrice = parseFloat(prevClosePrice);
            afterPrice = parseFloat(afterPrice);

            regularPrice.style.color = green;
            regPointsPctContainer.children[0].style.color = green;
            regPointsPctContainer.children[1].style.color = green;

            if (currentPrice < prevClosePrice) {
                regularPrice.style.color = red;
                regPointsPctContainer.children[0].style.color = red;
                regPointsPctContainer.children[1].style.color = red;
            }

            afterHrsPrice.style.color = green;
            afterHrsChange.style.color = green;
            afterHrsPct.style.color = green;

            if (afterPrice < currentPrice) {
                afterHrsPrice.style.color = red;
                afterHrsChange.style.color = red;
                afterHrsPct.style.color = red;
            }

        };
        const formatPrice = (container, divClass) => {
            let regExp = /[-]/;
            let regExNumb = /[a-z]/i;

            if (divClass === "reg_after_container") {
                let points = container.children[0].innerText;
                let pct = container.children[1].innerText;

                if (points && pct) {
                    if (!regExp.test(points)) {
                        points = `+${points}`
                        pct = `+${pct}`
                    }
                    container.children[0].innerText = `${points}`;
                    container.children[1].innerText = `(${pct}%)`;
                }
            }

            if (divClass === "commas") {
                for (let ele of container) {
                    let text = ele.innerText;
                    let regExDeci = /[.]/g, numbStr, denomination = "", startIndex = 0, endIndex;

                    if (!regExNumb.test(text)) {
                        let formatted = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(text);
                        numbStr = formatted;

                        //format volume figures only;
                        let classListArr = Array.from(ele.classList);
                        if (classListArr.includes("volume")) {
                            //count the decimals
                            let commaCheck = formatted.replaceAll(",", ".");
                            let decimals = commaCheck.match(regExDeci);
                            if (decimals.length > 2) {

                                //abbreviate formatted number (ie "B" or "T");
                                //locate the 2nd decimal's index
                                let firstSearch = ".";
                                let firstIndexofDecimal = commaCheck.indexOf(firstSearch);
                                let secondIndexofDecimal = commaCheck.indexOf(firstSearch, firstIndexofDecimal + 1);
                                endIndex = secondIndexofDecimal; //2nd decimal
                                //slice up to the 2nd decimal, excluding it.
                                formatted = commaCheck.slice(startIndex, endIndex);
                                //format 

                                formatted = new Intl.NumberFormat('en-US', { maximumSignificantDigits: 5, minimumSignificantDigits: 3 }).format(
                                    formatted
                                );

                                if (decimals.length === 5) {
                                    denomination = "T"
                                }
                                if (decimals.length === 4) {
                                    denomination = "B"
                                } if (decimals.length === 3) {
                                    denomination = "M"
                                }
                                numbStr = `${formatted}${denomination}`;
                            }
                        }

                        ele.innerText = numbStr;
                    }
                }

            }
            return
        };
        const setSession = () => {
            return new Promise(async (resolve) => {
                let analysis, preMarketPrice = "",
                    preMarketChange = "",
                    preMarketChangePercent = "",
                    preMarketTime = "",
                    postMarketPrice = "",
                    postMarketChange = "",
                    postMarketChangePercent = "",
                    postMarketTime = "",
                    regularMarketTime,
                    marketState,
                    afterHoursPointsChng, afterHoursPctChng, regularMarketChangePercent, regularMarketChange;
                let regDateTime = "", prePostMarketState = "", postTimeSearch,
                    postPriceSearch,
                    postPriceChangeSearch,
                    postPriceChangePercentSearch,
                    preTimeSearch,
                    prePriceSearch,
                    prePriceChangeSearch, stock, lastUpdateUtcDate, last_update_utc, stockName,
                    formatLastUpdateUtc,
                    prePriceChangePercentSearch, preOrPostPrice, preOrPostChange, preOrPostChangePct, preOrPostTime;

                let quoteCode = '<%=quoteSummErrorCode%>';
                let previousCloseSearch, regularPriceSearch, regularChangeSearch, regularChangePercentSearch, regularTimeSearch;
                //yahu results:
                if (quote && !quoteCode) {
                    previousCloseSearch = '<%=previousClose%>';
                    regularPriceSearch = '<%=regularMarketPrice%>';
                    regularTimeSearch = '<%=regularMarketTime%>';

                    regularChangeSearch = '<%=regularMarketChangePercent%>';
                    regularChangePercentSearch = '<%=regularMarketChange%>';
                    marketState = quote.marketState;

                    if (quoteType === "EQUITY") {
                        prePriceSearch = '<%=preMarketPrice%>';
                        prePriceChangeSearch = '<%=preMarketChange%>';
                        prePriceChangePercentSearch = '<%=preMarketChangePercent%>';
                        preTimeSearch = '<%=preMarketTime%>'
                        postPriceSearch = '<%=postMarketPrice%>'
                        postPriceChangeSearch = '<%=postMarketChange%>'
                        postPriceChangePercentSearch = '<%=postMarketChangePercent%>'
                        postTimeSearch = '<%=postMarketTime%>'
                    }
                }

                //yahu api search
                if (!quote && !quoteCode) {
                    let quoteURL = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes?region=US&symbols=${stockTicker}`;
                    quote = await fetch(quoteURL, apiOptions).catch((e) => console.log(e));
                    quote = await quote.json();
                    if (quote.quoteResponse.result.length > 0) {
                        quote = quote.quoteResponse.result[0];
                        if (quote.quoteSummary) {
                            if (quote.quoteSummary.errorResult) {
                                if (quote.quoteSummary.errorResult.code) {
                                    quoteCode = quote.quoteSummary.errorResult.code;
                                }
                            } else {

                                previousCloseSearch = quote.regularMarketPreviousClose;
                                regularPriceSearch = quote.regularMarketPrice;
                                regularChangeSearch = quote.regularMarketChange;
                                regularChangePercentSearch = quote.regularMarketChangePercent;
                                regularTimeSearch = quote.regularMarketTime;
                                marketState = quote.marketState;
                                if (quoteType === "EQUITY") {
                                    if (quote.postMarketPrice) {
                                        postTimeSearch = quote.postMarketTime;
                                        postPriceSearch = quote.postMarketPrice
                                        postPriceChangeSearch = quote.postMarketChange;
                                        postPriceChangePercentSearch = quote.postMarketChangePercent;
                                    }

                                    if (quote.preMarketPrice) {
                                        preTimeSearch = quote.preMarketTime;
                                        prePriceSearch = quote.preMarketPrice
                                        prePriceChangeSearch = quote.preMarketChange;
                                        prePriceChangePercentSearch = quote.preMarketChangePercent;
                                    }
                                }
                            }
                        }
                    }
                }

                //real time api search;
                if (quoteCode === "Not Found" || !quote) {
                    let realStockURL = `https://real-time-finance-data.p.rapidapi.com/stock-quote?symbol=%5E${stockTicker}&language=en`
                    stock = await fetch(realStockURL, realApiOptions).catch((e) => console.log(e));
                    stock = await stock.json();
                    //if stock not found, reroute to 404...
                    let keys = Object.keys(stock.data);
                    if (keys.length > 0) {
                        stockName = stock.data.name;
                        document.getElementById("company_name").innerText = stockName;
                        previousCloseSearch = stock.data.previous_close;
                        regularPriceSearch = stock.data.price;
                        regularChangeSearch = stock.data.change;
                        regularChangePercentSearch = stock.data.change_percent;
                        regularTimeSearch = stock.data.last_update_utc;
                        last_update_utc = stock.data.last_update_utc;
                        if (stock.data.pre_or_post_market) {
                            preOrPostPrice = stock.data.pre_or_post_market;
                            preOrPostChange = stock.data.pre_or_post_market_change;
                            preOrPostChangePct = stock.data.pre_or_post_market_change_percent;
                        }
                    }

                    if (keys.length === 0 && realElemStock) {
                        //must use server side realtimestockelem variables here:
                        stockName
                        regularPriceSearch
                        regularChangeSearch
                        regularChangePercentSearch
                        last_update_utc
                        previousCloseSearch
                    }
                }

                previousClose = previousCloseSearch;
                regularMarketPrice = regularPriceSearch;
                console.log("regularMktPrice", regularPriceSearch)
                regularMarketTime = regularTimeSearch;
                regularMarketChange = regularChangeSearch;
                regularMarketChangePercent = regularChangePercentSearch;

                if (prePriceSearch) {
                    preMarketPrice = prePriceSearch;
                    preMarketChange = prePriceChangeSearch
                    preMarketChangePercent = prePriceChangePercentSearch;
                    preMarketTime = preTimeSearch;
                }

                if (postPriceSearch) {
                    postMarketPrice = postPriceSearch;
                    postMarketChange = postPriceChangeSearch;
                    postMarketChangePercent = postPriceChangePercentSearch;
                    postMarketTime = postTimeSearch;
                }

                regDateTime = "At Close:";

                if (regularMarketTime) {
                    if (preMarketTime) {
                        if (regularMarketTime > preMarketTime && !postMarketTime) {
                            regDateTime = "Current Session:"
                        }
                    }
                }

                //realtime api
                if (last_update_utc) {
                    regDateTime = "Last Update:"
                    regularMarketTime = last_update_utc
                }

                //format prices:
                regularMarketPrice = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(regularMarketPrice);
                regularMarketChangePercent = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(regularMarketChangePercent);
                regularMarketChange = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(regularMarketChange);

                regularPrice.innerText = regularMarketPrice;
                regPointsPctContainer.children[0].innerText = regularMarketChangePercent;
                regPointsPctContainer.children[1].innerText = regularMarketChange;
                atCloseContainer.children[0].innerText = regDateTime;
                atCloseContainer.children[1].innerText = setMarketTime(regularMarketTime);

                let prePostTime; //yahu api
                if (preMarketTime >= regularMarketTime) {
                    prePostMarketState = "Pre-Market:"

                    if (preMarketPrice !== null || preMarketPrice !== undefined) {
                        afterHoursPrice = preMarketPrice
                    }
                    if (preMarketChange !== null || preMarketChange !== undefined) {
                        afterHoursPointsChng = preMarketChange
                    }
                    if (preMarketChangePercent !== null || preMarketChangePercent !== undefined) {
                        afterHoursPctChng = preMarketChangePercent
                    }
                    if (preMarketTime !== null || preMarketTime !== undefined) {
                        prePostTime = preMarketTime
                    }
                }

                if (postMarketTime >= regularMarketTime && postMarketTime > preMarketTime) {
                    prePostMarketState = "After Hours:"


                    if (postMarketPrice !== undefined || postMarketPrice !== null) {
                        afterHoursPrice = postMarketPrice
                    }
                    console.log("post market change:", postMarketChange)
                    if (postMarketChange !== undefined || postMarketChange !== null) {
                        afterHoursPointsChng = postMarketChange
                    }
                    if (postMarketChangePercent !== undefined || postMarketChangePercent !== null) {
                        afterHoursPctChng = postMarketChangePercent
                    }

                    if (postMarketTime !== undefined || postMarketTime !== null) {
                        prePostTime = postMarketTime;
                    }
                }

                //realTime api 
                if (preOrPostPrice) {
                    afterHoursPrice = preOrPostPrice;
                    afterHoursPointsChng = preOrPostChange;
                    afterHoursPctChng = preOrPostChangePct;
                    prePostMarketState = "Last Updated:";
                    prePostTime = last_update_utc
                }


                if (prePostMarketState) {
                    afterHoursPrice = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(afterHoursPrice);
                    afterHoursPointsChng = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(afterHoursPointsChng);
                    afterHoursPctChng = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(afterHoursPctChng);
                    afterHrsPrice.innerText = afterHoursPrice;
                    afterHrsChange.innerText = afterHoursPointsChng;
                    afterHrsPct.innerText = afterHoursPctChng;
                    afterHoursTimeContainer.children[0].innerText = prePostMarketState;

                    afterHoursTimeContainer.children[1].innerText = setMarketTime(prePostTime);
                }

                //previous closing price;
                previousCloseElem.innerText = previousClose;

                if (regDateTime === "Current Session:" || quoteType !== "EQUITY") {
                    afterHoursContainer.style.display = "none";
                }

                if (quoteType !== "EQUITY") {
                    slideContainer.style.display = "none";
                    ratioContainer.style.display = "none";
                    prevCloseContainer.style.maxWidth = "100%";
                    summaryProfileContainer.style.display = "none";
                }

                resolve("done")
            })
        }
        const grabChartData = async (symbol, range) => {
            let url;
            switch (range) {
                case "1d":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=5m&region=US&symbol=${symbol}&range=1d`

                case "5d":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=60m&region=US&symbol=${symbol}&range=5d`
                    break;
                case "1mo":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=1d&region=US&symbol=${symbol}&range=1mo`
                    break;
                case "YTD":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=1d&region=US&symbol=${symbol}&range=ytd`
                    break;
                case "2y":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=1d&region=US&symbol=${symbol}&range=2y`
                    break;
                default:
                    console.log("Range not found");
                    break;
            }

            const apiOptions = {
                method: "GET",
                headers: {
                    "X-RapidAPI-Key": KEY,
                    "X-RapidAPI-Host": HOST,
                },
            };

            let response = await fetch(url, apiOptions).catch((e) => console.log(e));
            response = await response.json();
            return response;
        };
        const fillChartData = async (responseData, range) => {
            let chartResp, chartTimes, closeQuote, openQuote;

            console.log("responseData:", responseData)

            let chartData = {
                datasets: [
                    {
                        label: "",
                        data: [],
                        borderColor: "",
                        backgroundColor: "",
                        tension: 0.1,
                        pointRadius: 0,
                    },
                ],
                labels: [],
            };

            chartResp = responseData.chart.result[0];
            chartTimes = responseData.chart.result[0].timestamp;
            openQuote = responseData.chart.result[0].indicators.quote[0].open;
            closeQuote = responseData.chart.result[0].indicators.quote[0].close;
            //Iterate over timestamp array, start from the last one, go backwards;
            let timestampEnd = chartTimes.length - 1;

            //return chartdata object;
            //start from the last one and go backwards;
            let firstChartPrice, finalChartPrice, nextTimestamp, regMarketTime, date, formatted;
            for (let i = timestampEnd; i >= 0; i--) {
                regMarketTime = chartTimes[i];

                date = new Date(regMarketTime * 1000);

                formatted = new Intl.DateTimeFormat("en-US", {
                    dateStyle: "short",
                    timeStyle: "long",
                    timeZone: "America/New_York",
                }).format(date);

                let labelDate = formatted;
                let mktPrice = closeQuote[i]; //closing price;

                //get next element date info;
                let nextDateCreate, nextDate, nextFormattedTime;
                if (chartTimes[i - 1] !== undefined) {
                    nextTimestamp = chartTimes[i - 1];
                    nextTimestamp *= 1000;
                    nextDateCreate = new Date(nextTimestamp);
                    nextDate = nextDateCreate.getDate();
                }

                //curr timestamp
                let currHours = date.getHours();
                let currMin = date.getMinutes();
                let currDate = date.getDate();
                //curr mkt open timestamp;
                let marketOpen = chartResp.meta.currentTradingPeriod.regular.start;
                let mktOpenDate = new Date(marketOpen * 1000);

                //mkt open;
                let mktHourOpen = mktOpenDate.getHours();
                let mktMinsOpen = mktOpenDate.getMinutes();

                //check if curr timestamp is market open;
                if (mktHourOpen === currHours && mktMinsOpen === currMin) {
                    mktPrice = openQuote[i];
                }

                chartData.datasets[0].data.unshift(mktPrice);
                chartData.labels.unshift(labelDate);

                //set color of line chart here;
                let latestPrice = chartData.datasets[0].data.length - 1;
                latestPrice = chartData.datasets[0].data[latestPrice];
                let earliestPrice = chartData.datasets[0].data[0];

                if (latestPrice >= earliestPrice) {
                    chartData.datasets[0].backgroundColor = green;
                    chartData.datasets[0].borderColor = green;
                } else {
                    chartData.datasets[0].backgroundColor = red;
                    chartData.datasets[0].borderColor = red;
                }

                if (range === "1d") {
                    if (currDate !== nextDate) {
                        return chartData
                    }
                }
            }
            return chartData;
        };
        const runChart = async (range) => {

            progressBarContainer.style.display = "initial"
            let stockChart = document.querySelector("#chart");
            stockChart.style.display = "none";
            document.getElementById("slide-container").style.display = "none";
            document.getElementById("summary_profile_container").style.display = "none";
            document.getElementById("index_data_container").style.display = "none";

            let grabchart, fillchart, response;
            response = await grabChartData(stockTicker, range).then((res) => { return res }).catch((e) => console.log(e));

            //set session
            if (range === "1d") {
                console.log("range:", range)
                setSession().then(() => formatPrice(regPointsPctContainer, "reg_after_container")).then(() => formatPrice(afterPointsPctContainer, "reg_after_container")).then(() => changePctPointsColor(regularMarketPrice, previousClose))
                    .catch((e) => console.log(e))
            }

            if (response.chart.result === null) {
                document.getElementById("not-available-container").style.display = "flex";
                document.getElementById("not-available-container").style.justifyContent = "center";
                document.getElementById("not-available-container").style.alignItems = "center";
                progressBarContainer.style.display = "none";
                document.getElementById("chart").style.display = "none";
            }

            if (response.chart.result !== null) {
                fillchart = await fillChartData(response, range).then((res) => { return res }).catch((e) => console.log(e));
                progressBarContainer.style.display = "none"
                stockChart.style.display = "initial";

                let chartResult = fillchart, options;

                options = {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                display: true,
                                color: "black"
                            }
                        },
                        x: {
                            display: true,
                            grid: {
                                display: false
                            },
                            ticks: {
                                major: {
                                    enabled: true
                                },
                                callback: (index) => {
                                    let label = chartResult.labels[index], labelStr, str1, str2, regExprColon = /[:]/, regExpComma = /[,]/, startIndex = 0, endIndex;
                                    let colonIndex = label.search(regExprColon), commaIndex = label.search(regExpComma);

                                    if (range === "1d") {
                                        startIndex = commaIndex + 2;
                                        endIndex = colonIndex + 3;
                                        str2 = label.slice(-6);
                                    } else {
                                        startIndex = 0;
                                        endIndex = commaIndex;
                                        str2 = ""
                                    }

                                    str1 = label.slice(startIndex, endIndex);

                                    labelStr = `${str1} ${str2}`;

                                    return labelStr
                                }
                            },
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        labels: {
                            font: {
                                size: 9
                            }
                        }
                    },
                    animations: {
                        radius: {
                            duration: 600,
                            easing: 'linear',
                            loop: true,
                            radius: 1,
                        }
                    },

                    interaction: {
                        mode: 'nearest',
                        intersect: false,
                        axis: 'x'
                    }
                }

                const config = {
                    type: "line",
                    data: chartResult,
                    options: options
                }

                chart = new Chart(canvas, config);

                return chart
            }

        }
        const runProgressBar = (range) => {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }

            progressBar.setAttribute("class", "run-progress-animation");

            //settimeout allows for animation to run for a bit;
            timeoutId = setTimeout(() => {
                runChart(range).then(async () => {
                    populateNews(stockTicker);
                    populateAnalysis(stockTicker);
                    if (quoteType === "EQUITY") {
                        populateProfile(stockTicker)
                        await populateIncomeData(stockTicker)
                        populateBalanceData(stockTicker)
                        populateCashFlowData(stockTicker)

                    }
                })
                    .catch((e) => console.log(e));
            }, 0)
        }
        const getBalanceSht = async (symbol) => {
            let result;
            const balanceShtURL = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-balance-sheet?symbol=${symbol}&region=US`;
            const response = await fetch(balanceShtURL, apiOptions).then((r) => { return r }).catch((e) => console.log(e));
            console.log("balance response:", response)
            if (response.status === 200) {
                result = await response.json();
            }
            return result
        }
        const getIncomeStmt = async (symbol) => {
            const incomeStmtURL = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-financials?symbol=${symbol}&region=US`;
            let result;
            const response = await fetch(incomeStmtURL, apiOptions).then((r) => { return r }).catch((e) => console.log(e));
            console.log("response:", response)
            if (response.status === 200) {
                result = await response.json();
            }
            return result
        }
        const getCashFlow = async (symbol) => {
            let result;
            const cashFlowStURL = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-cash-flow?symbol=${symbol}&region=US`;
            const response = await fetch(cashFlowStURL, apiOptions).catch((e) => console.log(e));
            if (response.status === 200) {
                result = await response.json();
            }
            return result
        }
        const populateIncomeData = async (symbol) => {
            let incomeData = await getIncomeStmt(symbol).then((res) => { return res }).catch((e) => console.log(e));
            console.log("income data:", incomeData)
            if (incomeData) {
                let currency, incomeTimeStampsArr,
                    timestampLength;

                if (incomeData.earnings) {
                    if (incomeData.earnings.financialCurrency) {
                        currency = incomeData.earnings.financialCurrency;
                    }
                } else {
                    currency = finCurrency;
                }

                incomeData = incomeData.timeSeries;
                //set currency code;
                let currencyElemList = document.querySelectorAll(".currency");
                for (let ele of currencyElemList) {
                    ele.innerText = currency;
                }

                //set years
                incomeTimeStampsArr = incomeData.timestamp;

                timestampLength = incomeTimeStampsArr.length;

                let incomeYr1 = incomeTimeStampsArr[timestampLength - 1];
                let incomeYr2 = incomeTimeStampsArr[timestampLength - 2];
                incomeYr1 = new Date(incomeYr1 * 1000);
                incomeYr2 = new Date(incomeYr2 * 1000);
                incomeYr1 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(incomeYr1);
                incomeYr2 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(incomeYr2);
                document.querySelector(".income-slide-years > .year1").innerText = incomeYr1;
                document.querySelector(".income-slide-years > .year2").innerText = incomeYr2

                //revenue cash flow
                let ttmRevenue, revenueYr1, revenueYr2;
                ttmRevenue = checkStmtProp(incomeData.trailingTotalRevenue[0]);
                revenueYr1 = checkStmtProp(incomeData.annualTotalRevenue[timestampLength - 1]);
                revenueYr2 = checkStmtProp(incomeData.annualTotalRevenue[timestampLength - 2]);
                document.querySelector(".total-revenue > .ttm").innerText = ttmRevenue;
                document.querySelector(".total-revenue > .year1").innerText = revenueYr1;
                document.querySelector(".total-revenue > .year2").innerText = revenueYr2;

                //gross profit
                let ttmGrossProfit, grossProfitYr1, grossProfitYr2;
                ttmGrossProfit = checkStmtProp(incomeData.trailingGrossProfit[0]);
                grossProfitYr1 = checkStmtProp(incomeData.annualGrossProfit[timestampLength - 1]);
                grossProfitYr2 = checkStmtProp(incomeData.annualGrossProfit[timestampLength - 2]);
                document.querySelector(".gross-profit > .ttm").innerText = ttmGrossProfit;
                document.querySelector(".gross-profit > .year1").innerText = grossProfitYr1;
                document.querySelector(".gross-profit > .year2").innerText = grossProfitYr2;

                let ttmOperatingExpense, operatingExpenseYr1, operatingExpenseYr2;
                ttmOperatingExpense = checkStmtProp(incomeData.trailingOperatingExpense[0]);
                operatingExpenseYr1 = checkStmtProp(incomeData.annualOperatingExpense[timestampLength - 1]);
                operatingExpenseYr2 = checkStmtProp(incomeData.annualOperatingExpense[timestampLength - 2]);
                document.querySelector(".operating-expense > .ttm").innerText = ttmOperatingExpense;
                document.querySelector(".operating-expense > .year1").innerText = operatingExpenseYr1;
                document.querySelector(".operating-expense > .year2").innerText = operatingExpenseYr2;

                let ttmOperatingIncome, operatingIncomeYr1, operatingIncomeYr2;
                ttmOperatingIncome = checkStmtProp(incomeData.trailingOperatingIncome[0]);
                operatingIncomeYr1 = checkStmtProp(incomeData.annualOperatingIncome[timestampLength - 1]);
                operatingIncomeYr2 = checkStmtProp(incomeData.annualOperatingIncome[timestampLength - 2]);
                document.querySelector(".operating-income > .ttm").innerText = ttmOperatingIncome;
                document.querySelector(".operating-income > .year1").innerText = operatingIncomeYr1;
                document.querySelector(".operating-income > .year2").innerText = operatingIncomeYr2;

                let ttmPreTaxIncome, preTaxIncomeYr1, preTaxIncomeYr2;
                ttmPreTaxIncome = checkStmtProp(incomeData.trailingPretaxIncome[0]);
                preTaxIncomeYr1 = checkStmtProp(incomeData.annualPretaxIncome[timestampLength - 1]);
                preTaxIncomeYr2 = checkStmtProp(incomeData.annualPretaxIncome[timestampLength - 2]);
                document.querySelector(".pre-tax-income > .ttm").innerText = ttmPreTaxIncome;
                document.querySelector(".pre-tax-income > .year1").innerText = preTaxIncomeYr1;
                document.querySelector(".pre-tax-income > .year2").innerText = preTaxIncomeYr2;

                let ttmOtherIncomeExp, otherIncomeExpYr1, otherIncomeExpYr2;
                ttmOtherIncomeExp = checkStmtProp(incomeData.trailingOtherIncomeExpense[0]);
                otherIncomeExpYr1 = checkStmtProp(incomeData.annualOtherIncomeExpense[timestampLength - 1]);
                otherIncomeExpYr2 = checkStmtProp(incomeData.annualOtherIncomeExpense[timestampLength - 2]);
                document.querySelector(".other-income-expense > .ttm").innerText = ttmOtherIncomeExp;
                document.querySelector(".other-income-expense > .year1").innerText = otherIncomeExpYr1;
                document.querySelector(".other-income-expense > .year2").innerText = otherIncomeExpYr2;

                let ttmBasicEps, basicEpsYr1, basicEpsYr2;
                ttmBasicEps = checkStmtProp(incomeData.trailingBasicEPS[0]);
                basicEpsYr1 = checkStmtProp(incomeData.annualBasicEPS[timestampLength - 1]);
                basicEpsYr2 = checkStmtProp(incomeData.annualBasicEPS[timestampLength - 2]);
                document.querySelector(".basic-eps > .ttm").innerText = ttmBasicEps;
                document.querySelector(".basic-eps > .year1").innerText = basicEpsYr1;
                document.querySelector(".basic-eps > .year2").innerText = basicEpsYr2;

                let ttmNetIncome, netIncomeYr1, netIncomeYr2;
                ttmNetIncome = checkStmtProp(incomeData.trailingNetIncome[0]);
                netIncomeYr1 = checkStmtProp(incomeData.annualNetIncome[timestampLength - 1]);
                netIncomeYr2 = checkStmtProp(incomeData.annualNetIncome[timestampLength - 2]);
                document.querySelector(".net-income > .ttm").innerText = ttmNetIncome;
                document.querySelector(".net-income > .year1").innerText = netIncomeYr1;
                document.querySelector(".net-income > .year2").innerText = netIncomeYr2;

                document.getElementById("slide-container").style.display = "flex";
            }
        }
        const populateBalanceData = async (symbol) => {
            let balanceData = await getBalanceSht(symbol).then((res) => { return res }).catch((e) => console.log(e));
            console.log("balance data:", balanceData)
            if (balanceData) {
                balanceData = balanceData.timeSeries;
                let balanceTimeStampArr = balanceData.timestamp;
                let timestampLength = balanceTimeStampArr.length;
                //set years, recent 3 years;
                let balanceYr1 = balanceTimeStampArr[timestampLength - 1];
                let balanceYr2 = balanceTimeStampArr[timestampLength - 2];
                let balanceYr3 = balanceTimeStampArr[timestampLength - 3];

                balanceYr1 = new Date(balanceYr1 * 1000);
                balanceYr2 = new Date(balanceYr2 * 1000);
                balanceYr3 = new Date(balanceYr3 * 1000);

                balanceYr1 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(balanceYr1);
                balanceYr2 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(balanceYr2);
                balanceYr3 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(balanceYr3);

                document.querySelector(".balance-slide-years > .year1").innerText = balanceYr1;
                document.querySelector(".balance-slide-years > .year2").innerText = balanceYr2;
                document.querySelector(".balance-slide-years > .year3").innerText = balanceYr3;

                //total assets
                let totalAssetsYr1, totalAssetsYr2, totalAssetsYr3;
                totalAssetsYr1 = checkStmtProp(balanceData.annualTotalAssets[timestampLength - 1]);
                totalAssetsYr2 = checkStmtProp(balanceData.annualTotalAssets[timestampLength - 2]);
                totalAssetsYr3 = checkStmtProp(balanceData.annualTotalAssets[timestampLength - 3]);
                document.querySelector(".total-assets > .year1").innerText = totalAssetsYr1;
                document.querySelector(".total-assets > .year2").innerText = totalAssetsYr2;
                document.querySelector(".total-assets > .year3").innerText = totalAssetsYr3;

                //total liabilities
                let totalLiabYr1, totalLiabYr2, totalLiabYr3;
                totalLiabYr1 = checkStmtProp(balanceData.annualTotalLiabilitiesNetMinorityInterest[timestampLength - 1]);
                totalLiabYr2 = checkStmtProp(balanceData.annualTotalLiabilitiesNetMinorityInterest[timestampLength - 2]);
                totalLiabYr3 = checkStmtProp(balanceData.annualTotalLiabilitiesNetMinorityInterest[timestampLength - 3]);
                document.querySelector(".total-liab > .year1").innerText = totalLiabYr1;
                document.querySelector(".total-liab > .year2").innerText = totalLiabYr2;
                document.querySelector(".total-liab > .year3").innerText = totalLiabYr3;

                //total equity
                let totalEquityYr1, totalEquityYr2, totalEquityYr3;
                totalEquityYr1 = checkStmtProp(balanceData.annualStockholdersEquity[timestampLength - 1]);
                totalEquityYr2 = checkStmtProp(balanceData.annualStockholdersEquity[timestampLength - 2]);
                totalEquityYr3 = checkStmtProp(balanceData.annualStockholdersEquity[timestampLength - 3]);
                document.querySelector(".total-equity > .year1").innerText = totalEquityYr1;
                document.querySelector(".total-equity > .year2").innerText = totalEquityYr2;
                document.querySelector(".total-equity > .year3").innerText = totalEquityYr3;

                //current debt
                let currentDebtYr1, currentDebtYr2, currentDebtYr3;
                currentDebtYr1 = checkStmtProp(balanceData.annualCurrentDebt[timestampLength - 1]);
                currentDebtYr2 = checkStmtProp(balanceData.annualCurrentDebt[timestampLength - 2]);
                currentDebtYr3 = checkStmtProp(balanceData.annualCurrentDebt[timestampLength - 3]);
                document.querySelector(".current-debt > .year1").innerText = currentDebtYr1;
                document.querySelector(".current-debt > .year2").innerText = currentDebtYr2;
                document.querySelector(".current-debt > .year3").innerText = currentDebtYr3;

                //current debt
                let longTermDebtYr1, longTermDebtYr2, longTermDebtYr3;
                longTermDebtYr1 = checkStmtProp(balanceData.annualLongTermDebt[timestampLength - 1]);
                longTermDebtYr2 = checkStmtProp(balanceData.annualLongTermDebt[timestampLength - 2]);
                longTermDebtYr3 = checkStmtProp(balanceData.annualLongTermDebt[timestampLength - 3]);
                document.querySelector(".long-term-debt > .year1").innerText = longTermDebtYr1;
                document.querySelector(".long-term-debt > .year2").innerText = longTermDebtYr2;
                document.querySelector(".long-term-debt > .year3").innerText = longTermDebtYr3;


                //accts receivable;
                let acctsRecYr1, acctsRecYr2, acctsRecYr3;
                acctsRecYr1 = checkStmtProp(balanceData.annualAccountsReceivable[timestampLength - 1]);
                acctsRecYr2 = checkStmtProp(balanceData.annualAccountsReceivable[timestampLength - 2]);
                acctsRecYr3 = checkStmtProp(balanceData.annualAccountsReceivable[timestampLength - 3]);
                document.querySelector(".accts-receive > .year1").innerText = acctsRecYr1;
                document.querySelector(".accts-receive > .year2").innerText = acctsRecYr2;
                document.querySelector(".accts-receive > .year3").innerText = acctsRecYr3;


                //accts payable;
                let acctsPayYr1, acctsPayYr2, acctsPayYr3;
                acctsPayYr1 = checkStmtProp(balanceData.annualAccountsPayable[timestampLength - 1]);
                acctsPayYr2 = checkStmtProp(balanceData.annualAccountsPayable[timestampLength - 2]);
                acctsPayYr3 = checkStmtProp(balanceData.annualAccountsPayable[timestampLength - 3]);
                document.querySelector(".accts-pay > .year1").innerText = acctsPayYr1;
                document.querySelector(".accts-pay > .year2").innerText = acctsPayYr2;
                document.querySelector(".accts-pay > .year3").innerText = acctsPayYr3;

                //retained earnings;
                let retainedEarnYr1, retainedEarnYr2, retainedEarnYr3;
                retainedEarnYr1 = checkStmtProp(balanceData.annualRetainedEarnings[timestampLength - 1]);
                retainedEarnYr2 = checkStmtProp(balanceData.annualRetainedEarnings[timestampLength - 2]);
                retainedEarnYr3 = checkStmtProp(balanceData.annualRetainedEarnings[timestampLength - 3]);
                document.querySelector(".retained-earn > .year1").innerText = retainedEarnYr1;
                document.querySelector(".retained-earn > .year2").innerText = retainedEarnYr2;
                document.querySelector(".retained-earn > .year3").innerText = retainedEarnYr3;
            }
        }

        const populateCashFlowData = async (symbol) => {
            let cashJsonData = await getCashFlow(symbol);
            console.log(cashJsonData);
            if (cashJsonData) {
                cashJsonData = cashJsonData.timeSeries;

                //set years
                let cashTimeStampsArr = cashJsonData.timestamp;
                let timestampLength = cashTimeStampsArr.length;

                let cashYr1 = cashTimeStampsArr[timestampLength - 1];
                let cashYr2 = cashTimeStampsArr[timestampLength - 2];
                cashYr1 = new Date(cashYr1 * 1000);
                cashYr2 = new Date(cashYr2 * 1000);
                cashYr1 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(cashYr1);
                cashYr2 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(cashYr2);
                document.querySelector(".cash-flow-slide-years > .year1").innerText = cashYr1;
                document.querySelector(".cash-flow-slide-years > .year2").innerText = cashYr2;

                //operating cash flow
                let ttmOpCash, opCashYr1, opCashYr2;
                ttmOpCash = checkStmtProp(cashJsonData.trailingOperatingCashFlow[0]);
                opCashYr1 = checkStmtProp(cashJsonData.annualOperatingCashFlow[timestampLength - 1]);
                opCashYr2 = checkStmtProp(cashJsonData.annualOperatingCashFlow[timestampLength - 2]);
                document.querySelector(".operating-cash-flow > .ttm").innerText = ttmOpCash;
                document.querySelector(".operating-cash-flow > .year1").innerText = opCashYr1;
                document.querySelector(".operating-cash-flow > .year2").innerText = opCashYr2;


                //investing-cash-flow
                let ttmInvCF, invCFYr1, invCFYr2;
                ttmInvCF = checkStmtProp(cashJsonData.trailingInvestingCashFlow[0]);
                invCFYr1 = checkStmtProp(cashJsonData.annualInvestingCashFlow[timestampLength - 1]);
                invCFYr2 = checkStmtProp(cashJsonData.annualInvestingCashFlow[timestampLength - 2]);
                document.querySelector(".investing-cash-flow > .ttm").innerText = ttmInvCF;
                document.querySelector(".investing-cash-flow > .year1").innerText = invCFYr1;
                document.querySelector(".investing-cash-flow > .year2").innerText = invCFYr2;

                //cash dividends
                let ttmCashDivs, cashDivsYr1, cashDivsYr2;
                ttmCashDivs = checkStmtProp(cashJsonData.trailingCashDividendsPaid[0]);
                cashDivsYr1 = checkStmtProp(cashJsonData.annualCashDividendsPaid[timestampLength - 1]);
                cashDivsYr2 = checkStmtProp(cashJsonData.annualCashDividendsPaid[timestampLength - 2]);
                document.querySelector(".cash-dividends-paid > .ttm").innerText = ttmCashDivs;
                document.querySelector(".cash-dividends-paid > .year1").innerText = cashDivsYr1;
                document.querySelector(".cash-dividends-paid > .year2").innerText = cashDivsYr2;

                //end-cash-position
                let ttmEndCashPos, endCashPosYr1, endCashPosY2;
                ttmEndCashPos = checkStmtProp(cashJsonData.trailingEndCashPosition[0]);
                endCashPosYr1 = checkStmtProp(cashJsonData.annualEndCashPosition[timestampLength - 1]);
                endCashPosY2 = checkStmtProp(cashJsonData.annualEndCashPosition[timestampLength - 2]);
                document.querySelector(".end-cash-position > .ttm").innerText = ttmEndCashPos;
                document.querySelector(".end-cash-position > .year1").innerText = endCashPosYr1;
                document.querySelector(".end-cash-position > .year2").innerText = endCashPosY2;

                //capital-expenditure
                let ttmCapEx, capExYr1, capExY2;
                ttmCapEx = checkStmtProp(cashJsonData.trailingCapitalExpenditure[0]);
                capExYr1 = checkStmtProp(cashJsonData.annualCapitalExpenditure[timestampLength - 1]);
                capExY2 = checkStmtProp(cashJsonData.annualCapitalExpenditure[timestampLength - 2]);
                document.querySelector(".capital-expenditure > .ttm").innerText = ttmCapEx;
                document.querySelector(".capital-expenditure > .year1").innerText = capExYr1;
                document.querySelector(".capital-expenditure > .year2").innerText = capExY2;

                //common-stock-iss
                let ttmcommStockIss, commStockIssYr1, commStockIssY2;
                ttmcommStockIss = checkStmtProp(cashJsonData.trailingCommonStockIssuance[0]);
                commStockIssYr1 = checkStmtProp(cashJsonData.annualCommonStockIssuance[timestampLength - 1]);
                commStockIssY2 = checkStmtProp(cashJsonData.annualCommonStockIssuance[timestampLength - 2]);
                document.querySelector(".common-stock-iss > .ttm").innerText = ttmcommStockIss;
                document.querySelector(".common-stock-iss > .year1").innerText = commStockIssYr1;
                document.querySelector(".common-stock-iss > .year2").innerText = commStockIssY2;

                //repayment-of-debt
                let ttmRepayDebt, repayDebtYr1, repayDebtY2;
                ttmRepayDebt = checkStmtProp(cashJsonData.trailingRepaymentOfDebt[0]);
                repayDebtYr1 = checkStmtProp(cashJsonData.annualRepaymentOfDebt[timestampLength - 1]);
                repayDebtY2 = checkStmtProp(cashJsonData.annualRepaymentOfDebt[timestampLength - 2]);
                document.querySelector(".repayment-of-debt > .ttm").innerText = ttmRepayDebt;
                document.querySelector(".repayment-of-debt > .year1").innerText = repayDebtYr1;
                document.querySelector(".repayment-of-debt > .year2").innerText = repayDebtY2;

                //free-cash-flow
                let ttmFreeCashFlow, freeCashFlowYr1, freeCashFlowY2;
                ttmFreeCashFlow = checkStmtProp(cashJsonData.trailingFreeCashFlow[0]);
                freeCashFlowYr1 = checkStmtProp(cashJsonData.annualFreeCashFlow[timestampLength - 1]);
                freeCashFlowY2 = checkStmtProp(cashJsonData.annualFreeCashFlow[timestampLength - 2]);
                document.querySelector(".free-cash-flow > .ttm").innerText = ttmFreeCashFlow;
                document.querySelector(".free-cash-flow > .year1").innerText = freeCashFlowYr1;
                document.querySelector(".free-cash-flow > .year2").innerText = freeCashFlowY2;
            }
        }
        const getNews = async (symbol) => {
            const url = `https://real-time-finance-data.p.rapidapi.com/stock-news?symbol=${symbol}%3ANASDAQ&language=en`;
            let response,
                result
            try {
                response = await fetch(url, realApiOptions);
                result = await response.json();
            } catch (error) {
                console.error(error);
            }

            return result
        }
        function getRandomInt(max) {
            return Math.floor(Math.random() * max);
        }
        const populateNews = async (symbol) => {
            let news = await getNews(symbol).then((res) => { return res }).catch((e) => console.log(e));

            if (news.data.news) {
                let newsArr = news.data.news;
                let title, articleUrl, source, date;
                let length = newsArr.length - 1;
                let i = getRandomInt(length);
                let curr = newsArr[i];
                while (curr === null || curr === undefined) {
                    i = getRandomInt(length);
                    curr = newsArr[i];
                }

                title = curr.article_title;
                articleUrl = curr.article_url;
                source = curr.source;
                date = curr.post_time_utc;
                let dateOb = new Date(date);
                let hr = dateOb.getHours();
                let dateOfMonth = dateOb.getDate();


                document.querySelector("#article-title").innerText = `"${title}"`;
                document.querySelector("#article-source > #article-link").setAttribute("href", articleUrl)
                document.querySelector("#article-source > #article-link").innerText = source;


                document.querySelector("#article-time").innerText = `${date} UTC`;
            } else {
                const insightContainer = document.querySelector("#insights-container");
                insightContainer.style.display = "none";
            }
        }
        const runAnalysis = async (symbol) => {
            let analysisFetch, analysisResp;

            const analysisURL = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-analysis?symbol=${symbol}&region=US`;
            analysisFetch = await fetch(analysisURL, apiOptions);
            console.log("analysis fetch:", analysisFetch);
            if (analysisFetch.status === 200) {
                analysisResp = await analysisFetch.json();
            }
            return analysisResp
        }
        const trueOrFalse = (exp, val) => {
            if (!exp) exp = val;

            return exp ? exp : val;
        }
        const hideElem = (elem, val, na) => {
            elem.innerText = trueOrFalse(val, na);
            if (elem.innerText === na || elem.innerText === "undefined,") elem.style.display = "none";
            return;
        }
        const populateAnalysis = async (symbol) => {
            const ratioContainer = document.getElementById("ratio-container");
            const prevCloseContainer = document.getElementById("prev-close-container");

            let analysis = await runAnalysis(symbol);
            if (analysis) {
                let fwdPE = "n/a", ttmPE = "n/a", revGrowth = "n/a", ebitdaMargins = "n/a",
                    currentRatio = "n/a", quickRatio = "n/a",
                    debtToEquityRatio = "n/a",
                    returnOnEquity = "n/a",
                    operatingMargins = "n/a",
                    profitMargins = "n/a",
                    grossMargins = "n/a",
                    dividendRate = "n/a",
                    exDividendDate = "n/a",
                    regularMarketOpen = "n/a",
                    regularMarketDayHigh = "n/a",
                    regularMarketDayLow = "n/a",
                    fiftyTwoWeekHigh = "n/a",
                    fiftyTwoWeekLow = "n/a",
                    twoHundredDayAverage = "n/a",
                    bid = "n/a",
                    ask = "n/a",
                    volume = "n/a",
                    averageVolume10Days = "n/a",
                    beta = "n/a",
                    marketCap = "n/a";
                if (analysis.financialData) {
                    if (analysis.financialData.financialCurrency) {
                        finCurrency = analysis.financialData.financialCurrency
                    }
                }

                if (analysis.summaryDetail) {
                    //populate html;
                    if (analysis.summaryDetail.forwardPE) {
                        fwdPE = trueOrFalse(analysis.summaryDetail.forwardPE.fmt, fwdPE);
                    }
                    document.getElementById("fwdPeRatioData").innerText = fwdPE;

                    if (analysis.summaryDetail.trailingPE) {
                        ttmPE = trueOrFalse(analysis.summaryDetail.trailingPE.fmt, ttmPE)
                    }
                    document.getElementById("ttmPeRatioData").innerText = ttmPE;

                    if (analysis.financialData.revenueGrowth) {
                        revGrowth = trueOrFalse(analysis.financialData.revenueGrowth.fmt, revGrowth)
                    }
                    document.getElementById("revGrowData").innerText = revGrowth;

                    if (analysis.financialData.ebitdaMargins) {
                        ebitdaMargins = trueOrFalse(analysis.financialData.ebitdaMargins.fmt, ebitdaMargins)
                    }
                    document.getElementById("ebitMarginData").innerText = ebitdaMargins;

                    if (analysis.financialData.currentRatio) {
                        currentRatio = trueOrFalse(analysis.financialData.currentRatio.fmt, currentRatio)
                    }
                    document.getElementById("currRatioData").innerText = currentRatio;

                    if (analysis.financialData.quickRatio) {
                        quickRatio = trueOrFalse(analysis.financialData.quickRatio.fmt, quickRatio)
                    }
                    document.getElementById("quickRatioData").innerText = quickRatio;

                    if (analysis.financialData.debtToEquity) {
                        debtToEquityRatio = trueOrFalse(analysis.financialData.debtToEquity.fmt, debtToEquityRatio)
                    }
                    document.getElementById("debtRatioData").innerText = debtToEquityRatio;

                    if (analysis.financialData.returnOnEquity) {
                        returnOnEquity = trueOrFalse(analysis.financialData.returnOnEquity.fmt, returnOnEquity)
                    }
                    document.getElementById("retEquData").innerText = returnOnEquity;

                    if (analysis.financialData.operatingMargins) {
                        operatingMargins = trueOrFalse(analysis.financialData.operatingMargins.fmt, operatingMargins)
                    }
                    document.getElementById("opMarginData").innerText = operatingMargins;

                    if (analysis.financialData.profitMargins) {
                        profitMargins = trueOrFalse(analysis.financialData.profitMargins.fmt, profitMargins)
                    }
                    document.getElementById("profMarginData").innerText = profitMargins;

                    if (analysis.financialData.grossMargins) {
                        grossMargins = trueOrFalse(analysis.financialData.grossMargins.fmt, grossMargins)
                    }
                    document.getElementById("grossMarginData").innerText = grossMargins;

                    if (analysis.summaryDetail.dividendRate) {
                        dividendRate = trueOrFalse(analysis.summaryDetail.dividendRate.fmt, dividendRate);
                    }
                    document.getElementById("dividendRateData").innerText = dividendRate;

                    if (analysis.summaryDetail.exDividendDate) {
                        exDividendDate = trueOrFalse(analysis.summaryDetail.exDividendDate.fmt, exDividendDate);
                    }
                    document.getElementById("exDividendData").innerText = exDividendDate;

                    if (analysis.price.regularMarketOpen) {
                        regularMarketOpen = trueOrFalse(analysis.price.regularMarketOpen.fmt, regularMarketOpen)
                    }
                    document.getElementById("openData").innerText = regularMarketOpen;

                    if (analysis.summaryDetail.regularMarketDayLow) {
                        regularMarketDayLow = trueOrFalse(analysis.summaryDetail.regularMarketDayLow.fmt, regularMarketDayLow);
                    }
                    document.getElementById("dayLowData").innerText = regularMarketDayLow;

                    if (analysis.summaryDetail.regularMarketDayHigh) {
                        regularMarketDayHigh = trueOrFalse(analysis.summaryDetail.regularMarketDayHigh.fmt, regularMarketDayHigh);
                    }
                    document.getElementById("dayHighData").innerText = regularMarketDayHigh;

                    if (analysis.summaryDetail.fiftyTwoWeekHigh) {
                        fiftyTwoWeekHigh = trueOrFalse(analysis.summaryDetail.fiftyTwoWeekHigh.fmt, fiftyTwoWeekHigh);
                    }
                    document.getElementById("fifty2WkHighData").innerText = fiftyTwoWeekHigh;

                    if (analysis.summaryDetail.fiftyTwoWeekLow) {
                        fiftyTwoWeekLow = trueOrFalse(analysis.summaryDetail.fiftyTwoWeekLow.fmt, fiftyTwoWeekLow);
                    }
                    document.getElementById("fifty2WkLowData").innerText = fiftyTwoWeekLow;

                    if (analysis.summaryDetail.twoHundredDayAverage) {
                        twoHundredDayAverage = trueOrFalse(analysis.summaryDetail.twoHundredDayAverage.fmt, twoHundredDayAverage);
                    }
                    document.getElementById("twoHundDayAvgData").innerText = twoHundredDayAverage;

                    if (analysis.summaryDetail.bid) {
                        bid = trueOrFalse(analysis.summaryDetail.bid.fmt, bid);
                    }
                    document.getElementById("bidData").innerText = bid;

                    if (analysis.summaryDetail.ask) {
                        ask = trueOrFalse(analysis.summaryDetail.ask.fmt, ask);
                    }
                    document.getElementById("askData").innerText = ask;

                    if (analysis.summaryDetail.beta) {
                        beta = trueOrFalse(analysis.summaryDetail.beta.fmt, beta);
                    }
                    document.getElementById("betaData").innerText = beta;

                    if (analysis.summaryDetail.marketCap) {
                        marketCap = trueOrFalse(analysis.summaryDetail.marketCap.fmt, marketCap);
                    }
                    document.getElementById("mktCapData").innerText = marketCap;

                    if (analysis.summaryDetail.volume) {
                        volume = trueOrFalse(analysis.summaryDetail.volume.fmt, volume);
                    }
                    document.getElementById("volumeData").innerText = volume;

                    if (analysis.summaryDetail.averageVolume10days) {
                        averageVolume10Days = trueOrFalse(analysis.summaryDetail.averageVolume10days.fmt, averageVolume10Days);
                    }
                    document.getElementById("avgVolData").innerText = averageVolume10Days;
                }
                document.getElementById("index_data_container").style.display = "flex";
            }
        }
        const populateProfile = async (symbol) => {
            let profileFetch,
                profileResp;
            const profileURL = `https://real-time-finance-data.p.rapidapi.com/stock-overview?symbol=${symbol}&language=en`

            try {
                profileFetch = await fetch(profileURL, realApiOptions)
                if (profileFetch.status === 200) {
                    profileResp = await profileFetch.json();
                }

            } catch (error) {
                console.log(error)
            }
            if (profileResp) {
                let summary = profileResp.data.about;
                let streetAddress = profileResp.data.company_street_address;
                let country = profileResp.data.company_country;
                let state = profileResp.data.company_state;
                let city = profileResp.data.company_city;
                city = `${city},`
                let ceo = profileResp.data.company_ceo;

                let employees = profileResp.data.company_employees;
                let website = profileResp.data.company_website;
                let founded = profileResp.data.company_founded_date;

                let na = "n/a";

                hideElem(document.getElementById("company_desc"), summary, na)
                hideElem(document.getElementById("address"), streetAddress, na)
                hideElem(document.getElementById("city"), city, na)
                hideElem(document.getElementById("state"), state, na)
                hideElem(document.getElementById("country"), country, na)
                hideElem(document.getElementById("website-link"), website, na)
                hideElem(document.getElementById("ceo"), ceo, na)
                hideElem(document.getElementById("full_time_employees"), employees, na)
                document.getElementById("summary_profile_container").style.display = "flex";
            }
        }
        /**
                const idlePage = () => {
                    if (timeout) {
                        clearInterval(timeout);
                    }
                    timeout = setInterval(() => {
                        location.reload();
                    }, 60000);
                }
                const activePage = () => {
                    if (timeout2) clearInterval(timeout2);
                    timeout2 = setTimeout(async () => {
                        await getRapidPrices(apiKey, stockTicker);
                        formatPrice(pricesAndPercents);
                        changePctPointsColor(pricePctContainers);
                        console.log("active");
                    }, 180000);
                }
        */
        slides.forEach((slide, index) => {
            //touch events
            slide.addEventListener('touchstart', touchStart(index))
            slide.addEventListener('touchend', touchEnd);
            slide.addEventListener('touchmove', touchMove)
            //mouse events
            slide.addEventListener('mousedown', touchStart(index))
            slide.addEventListener('mouseup', touchEnd)
            slide.addEventListener('mouseleave', touchEnd)
            slide.addEventListener('mousemove', touchMove)
        })

        slideNavChevrons.forEach((chevron) => {
            chevron.addEventListener("click", () => {
                //next button
                let chevronDirection = chevron.classList.contains("slide-next");
                isDragging = true;
                animationId = requestAnimationFrame(animation);
                if (chevronDirection) {
                    if (currSlideIndex < slides.length - 1) {
                        currSlideIndex += 1
                    }
                }

                //prev button
                if (!chevronDirection) {
                    if (currSlideIndex > 0) {
                        currSlideIndex -= 1;
                    }
                }


                isDragging = false;
                cancelAnimationFrame(animationId);
                setPostionByIndex()
            })
        })

        function touchStart(index) {
            return function (event) {
                currSlideIndex = index;
                startPosition = getPositionX(event);

                isDragging = true;
                animationId = requestAnimationFrame(animation);
                slidesWrapper.style.cursor = "grabbing";
            }
        }

        function touchEnd() {
            isDragging = false;
            cancelAnimationFrame(animationId);
            const movedBy = currTranslateX - prevTranslateX;

            if (movedBy < -50 && currSlideIndex < slides.length - 1) {
                currSlideIndex += 1

            }
            if (movedBy > 50 && currSlideIndex > 0) currSlideIndex -= 1;
            setPostionByIndex()
            slidesWrapper.style.cursor = "grab";
        }

        function touchMove(event) {
            if (isDragging) {
                const currentPosition = getPositionX(event)
                currTranslateX = prevTranslateX + currentPosition - startPosition;

            }
        }

        function getPositionX(event) {
            return event.type.includes("mouse") ? event.pageX : event.touches[0].clientX;
        }

        function animation() {
            setSliderPosition()
            if (isDragging) requestAnimationFrame(animation)
        }

        function setSliderPosition() {
            slidesWrapper.style.transform = `translateX(${currTranslateX}%)`;
        }

        function setPostionByIndex() {
            currTranslateX = currSlideIndex * -105;
            prevTranslateX = currTranslateX;
            setSliderPosition()
        }

        const setMarketTime = (timeStamp) => {
            let date, formatted, regExpNumbers = /[:-]/;

            if (!regExpNumbers.test(timeStamp)) {
                timeStamp = timeStamp * 1000;
            }

            date = new Date(timeStamp);
            console.log("date:", date)
            formatted = new Intl.DateTimeFormat('en-US', {
                dateStyle: 'short',
                timeStyle: 'long',
                timeZone: 'America/New_York',
            }).format(date)

            return formatted

        }

        const setEventListeners = () => {
            //timeline links: 1d 5d ytd 1y 2yr
            let timelineLinks = chartTimelineContainer.children;

            timelineLinks[0].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("1d");
            });

            timelineLinks[1].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("5d");
            });

            timelineLinks[2].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("1mo");
            });

            timelineLinks[3].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("YTD");
            });

            timelineLinks[4].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("2y");
            });

            h2Box.addEventListener("focus", () => {
                const h2ChildNodes = h2Box.childNodes;
                const selection = window.getSelection();
                if (h2Box.innerText === "Enter ticker or company...") {
                    h2Box.innerText = "";
                }
                //set caret position after text node
                if (h2ChildNodes.length > 0) {
                    selection.setPosition(h2ChildNodes[0], h2ChildNodes[0].length);
                } else {
                    selection.setPosition(h2Box, 0);
                }

                return;
            });
            h2Box.addEventListener("focusout", () => {
                if (h2Box.innerText === "") h2Box.innerText = "Enter ticker or company...";
                if (h2Box.style.backgroundColor === "#15192f") {
                    h2Box.style.backgroundColor === "#012c12";
                }
            });
            h2Box.addEventListener("keydown", (e) => {
                const textString = h2Box.innerText;
                if (textString.length >= 20 && e.key !== "Backspace" && e.key !== "Enter" && e.key !== " ") {
                    e.preventDefault();
                    alert("Character amount exceeded");
                }
                //prevent navigation keys;
                if (textString.length > 0) {
                    let navKeys = [
                        "ArrowLeft",
                        "ArrowRight",
                        "ArrowDown",
                        "ArrowUp",
                        "Left",
                        "Right",
                        "Up",
                        "Down",
                        "Home",
                        "End",
                        "Del",
                        "Delete",
                        "PageUp",
                        "PageDown",
                        "Insert",
                    ];

                    for (const ele of navKeys) {
                        if (e.key === ele) {
                            e.preventDefault();
                            alert("Invalid entry");
                        }
                    }

                    if (textString === "" && e.key === "Enter") {
                        e.preventDefault();
                        alert("enter a valid ticker");
                    }

                    if (e.key === "Enter" && textString !== "") {
                        //enter the ticker string into the url parameter
                        //grab the URL;
                        //grab url param instead of string of element;
                        //window.location.href
                        let url = '<%=CURR_DOMAIN%>'

                        url = `${url}${textString}`

                        //check ticker string
                        window.location.href = url;
                    }
                }
                //prevent non-letters
                //Allow Backspace, Enter keys;
                //Note: navigation keys are failing the regexp test;
                if (!regExp.test(e.key)) {
                    if (e.key !== "Backspace" && e.key !== "Enter" && e.key !== " ") {
                        e.preventDefault();
                        alert("Invalid entry");
                    }
                }
            });
        }

        h2Box.focus();
        ratioContainer.removeAttribute("style");
        afterHoursContainer.removeAttribute("style");
        summaryProfileContainer.removeAttribute("style");
        runProgressBar("1d");
        setEventListeners();
        formatPrice(commas, "commas");

        //set interval to fetch/grab chart data "1d", and set session for periodic price update
    </script>

</body>

</html>