<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/head.ejs') %>
</head>

<body id="ticker_body" class="body">
    <header class="headerBox">
        <h2 contenteditable></h2>
    </header>

    <section id="stock_price_container">
        <div id="home-chart-container">
            <div id="home-price-container">
                <div id="home_link_container">
                    <a href="<%=CURR_DOMAIN%>" target="_self">Home</a>
                    <span id="arrow">></span>
                    <span id="symbol">
                        <% let symb="" %>
                            <% if(quotes){ %>
                                <% if(quotes.symbol){%>
                                    <% symb=quotes.symbol%>
                                        <% }}%>
                                            <%=symb%>
                    </span>
                </div>
                <div id="price-insight-container">
                    <div id="price_hours_container">
                        <h5 id="company_name">
                            <% let name="" %>
                                <% if(quotes){%>
                                    <% if(quotes.shortName){ %>
                                        <% name=quotes.shortName %>
                                            <% if(quotes.longName){ %>
                                                <% name=quotes.longName %>
                                                    <% }}} %>
                                                        <%= name %>
                        </h5>
                        <div id="price_time_container">
                            <div id="reg_container" class="reg_after_container">
                                <div id="reg_hours_container" class="reg_hours_container">
                                    <h3 id="reg_hours_price" class="price">

                                    </h3>
                                    <div id="reg_hours_pct_container" class="hours_pct_container">
                                        <h5 id="reg_hours_change" class="price">

                                        </h5>
                                        <h5 id="reg_hours_pct" class="price">

                                        </h5>
                                    </div>
                                </div>
                                <div id="at_close_container" class="trading_hours_container">
                                    <h6 id="at_close_txt"></h6>
                                    <h6 id="at_close_time"></h6>
                                </div>
                            </div>
                            <div id="after_container" class="reg_after_container">
                                <div id="after_hours_pp_container" class="reg_hours_container">
                                    <h5 id="after_hours_price" class="price">

                                    </h5>
                                    <div id="after_hours_pct_container" class="hours_pct_container">
                                        <h6 id="after_hours_change" class="price">

                                        </h6>
                                        <h6 id="after_hours_pct" class="price">
                                        </h6>
                                    </div>
                                </div>
                                <div id="after_hours_time_container" class="trading_hours_container">
                                    <h6 id="after_hours_txt"></h6>
                                    <h6 id="after_hours_time"></h6>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="insights-container">
                        <h5 id="article-title"></h5>
                        <div id="source-time-container">
                            <h6 id="article-source"><a id="article-link" href="" target="_blank">
                                </a></h6>
                            <div id="article-time"></div>
                        </div>
                    </div>
                </div>

            </div>
            <div id="chart_container">
                <div id="progress-bar-container">
                    <div id="progress-bar" style="--width:35">Loading...</div>
                </div>
                <canvas id="chart" class="charts"></canvas>
            </div>
        </div>
        <div id="chart-timeline-container">
            <h6 id="1d" class="timeline-link ">1D</h6>
            <h6 id="5d" class="timeline-link ">5D</h6>
            <h6 id="1mo" class="timeline-link">1M</h6>
            <h6 id="YTD" class="timeline-link">YTD</h6>
            <h6 id="2y" class="timeline-link">2Y</h6>
        </div>
        </div>
        <section id="index_data_container" class="index_data_container">
            <div id="ratio-container" class="index-data-kids">
                <div class="border-line">
                    <div id="fwdPeRatio">Forward P/E</div>
                    <% let fwdPeRatio="N/A" %>
                        <% if(analysis){ %>
                            <% if(analysis.summaryDetail){ %>
                                <% if(analysis.summaryDetail.forwardPE.fmt){ %>
                                    <% fwdPeRatio=analysis.summaryDetail.forwardPE.fmt}}} %>
                                        <div id="fwdPeRatioData" class="indexData">
                                            <%=fwdPeRatio %>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="ttmPeRatio">P/E (TTM)</div>
                    <% let ttmPeRatio="N/A" %>
                        <% if(analysis){ %>
                            <% if(analysis.summaryDetail){ %>
                                <% if(analysis.summaryDetail.trailingPE){ %>
                                    <% ttmPeRatio=analysis.summaryDetail.trailingPE.fmt}}} %>
                                        <div id="ttmPeRatioData" class="indexData">
                                            <%=ttmPeRatio %>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="revGrow">Revenue Growth</div>
                    <% let revGrow="N/A" %>
                        <% if(analysis){%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.revenueGrowth){ %>
                                    <% revGrow=analysis.financialData.revenueGrowth.fmt}}} %>
                                        <div id="revGrowData" class="indexData">
                                            <%=revGrow%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="ebitMarg">Ebitda Margin</div>
                    <% let ebitMarg="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.ebitdaMargins.fmt){ %>
                                    <% ebitMarg=analysis.financialData.ebitdaMargins.fmt}}} %>
                                        <div id="ebitMarg" class="indexData">
                                            <%=ebitMarg%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="curr-ratio">Current Ratio</div>
                    <% let currRatio="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.currentRatio.fmt){ %>
                                    <% currRatio=analysis.financialData.currentRatio.fmt}}} %>
                                        <div id="curr-ratio" class="indexData">
                                            <%=currRatio%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="quick-ratio">Quick Ratio</div>
                    <% let quickRatio="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.quickRatio.fmt){ %>
                                    <% quickRatio=analysis.financialData.quickRatio.fmt}}}%>
                                        <div id="quick-ratio" class="indexData">
                                            <%=quickRatio%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="debt-ratio">Debt-to-Equity Ratio</div>
                    <% let debtRatio="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.debtToEquity.fmt){ %>
                                    <% debtRatio=analysis.financialData.debtToEquity.fmt}}}%>
                                        <div id="debt-ratio" class="indexData">
                                            <%=debtRatio%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="retEqu">Return On Equity</div>
                    <% let rEq="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.returnOnEquity.fmt){ %>
                                    <% rEq=analysis.financialData.returnOnEquity.fmt}}} %>
                                        <div id="retEqu" class="indexData">
                                            <%=rEq%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="op-Margin">Operating Margin</div>
                    <% let opMargin="N/A" %>
                        <% if(analysis){ %>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.operatingMargins.fmt){ %>
                                    <% opMargin=analysis.financialData.operatingMargins.fmt}}} %>
                                        <div id="op-Margin" class="indexData">
                                            <%=opMargin%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="prof-Margin">Profit Margin</div>
                    <% let profMargin="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.profitMargins.fmt){ %>
                                    <% profMargin=analysis.financialData.profitMargins.fmt}}} %>
                                        <div id="prof-Margin" class="indexData">
                                            <%=profMargin%>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="grossMargin">Gross Margin</div>
                    <% let grossMargin="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.financialData){ %>
                                <% if(analysis.financialData.grossMargins.fmt){ %>
                                    <% grossMargin=analysis.financialData.grossMargins.fmt}}}%>
                                        <div id="grossMarginPct" class="indexData">
                                            <%=grossMargin %>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="dividend">Dividend Rate</div>
                    <% let divRate="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.summaryDetail){%>
                                <% if(analysis.summaryDetail.dividendRate){ %>
                                    <% if(analysis.summaryDetail.dividendRate.fmt){ %>
                                        <% divRate=analysis.summaryDetail.dividendRate.fmt}}}}%>
                                            <div id="dividendRate" class="indexData div-rate">
                                                <%=divRate %>
                                            </div>
                </div>
                <div class="border-line no-border-bottom">
                    <div id="exDividend">Ex-Dividend Date</div>
                    <% let exDiv="N/A" %>
                        <% if(analysis) {%>
                            <% if(analysis.summaryDetail){ %>
                                <% if(analysis.summaryDetail.exDividendDate){ %>
                                    <% if(analysis.summaryDetail.exDividendDate.fmt){ %>
                                        <% exDiv=analysis.summaryDetail.exDividendDate.fmt}}}}%>
                                            <div id="exDivDate" class="indexData exDivDate">
                                                <%=exDiv %>
                                            </div>
                </div>
            </div>
            <div id="prev-close-container" class="index-data-kids">
                <div class="border-line">
                    <div id="prevClose">Previous Close</div>

                    <div id="prevClosData" class="indexData commas">

                    </div>
                </div>
                <div class="border-line">
                    <div id="open">Market Open</div>
                    <% let open="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes){ %>
                                <% if(quotes.regularMarketOpen){ %>
                                    <% open=quotes.regularMarketOpen}}}%>
                                        <div id="openData" class="indexData commas">
                                            <%=open %>
                                        </div>
                </div>
                <div class="border-line">
                    <div id="dayLow">Day's Low</div>
                    <% let dayLow="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.regularMarketDayLow){ %>
                                <% dayLow=quotes.regularMarketDayLow}}%>
                                    <div id="dayLowData" class="indexData commas">
                                        <%=dayLow %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="dayHigh">Day's High</div>
                    <% let dayHigh="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.regularMarketDayHigh){ %>
                                <% dayHigh=quotes.regularMarketDayHigh}} %>
                                    <div id="dayHighData" class="indexData commas">
                                        <%=dayHigh %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="fifty2WkLow">52 Week Low</div>
                    <% let fifty2WkLo="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.fiftyTwoWeekLow){ %>
                                <% fifty2WkLo=quotes.fiftyTwoWeekLow}}%>
                                    <div id="fifty2WkLowData" class="indexData commas">
                                        <%=fifty2WkLo %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="fifty2WkHigh">52 Week High</div>
                    <% let fifty2WkHi="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.fiftyTwoWeekHigh){ %>
                                <% fifty2WkHi=quotes.fiftyTwoWeekHigh}} %>
                                    <div id="fifty2WkHighData" class="indexData commas">
                                        <%=fifty2WkHi %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="twoHundDayAvg">200 Day Avg</div>
                    <% let twoHDAvg="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.twoHundredDayAverage){ %>
                                <% twoHDAvg=quotes.twoHundredDayAverage}} %>
                                    <div id="twoHundDayAvgData" class="indexData commas">
                                        <%=twoHDAvg %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id='bid'>Bid</div>
                    <% let bid="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.bid){ %>
                                <% bid=quotes.bid}}%>
                                    <div id='bidData' class="indexData commas">
                                        <%=bid %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="ask">Ask</div>
                    <%let ask="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.ask){ %>
                                <% ask=quotes.ask}}%>
                                    <div id="askData" class="indexData commas">
                                        <%=ask %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="beta">Beta</div>
                    <%let beta="N/A" %>
                        <% if(analysis){ %>
                            <% if(analysis.summaryDetail){ %>
                                <% if(analysis.summaryDetail.beta){ %>
                                    <% if(analysis.summaryDetail.beta.fmt){ %>
                                        <% beta=analysis.summaryDetail.beta.fmt}}}} %>
                                            <div id="beta" class="indexData commas">
                                                <%=beta %>
                                            </div>
                </div>
                <div class="border-line">
                    <div id="mktCap">Market Cap</div>
                    <%let mktCap="N/A" %>
                        <% if(analysis){ %>
                            <% if(analysis.price){ %>
                                <% if(analysis.price.marketCap){ %>
                                    <% if(analysis.price.marketCap){ %>
                                        <% mktCap=analysis.price.marketCap.fmt}}}}%>
                                            <div id="mktCap" class="indexData">
                                                <%=mktCap %>
                                            </div>
                </div>
                <div class="border-line">
                    <div id="volume">Volume</div>
                    <%let volume="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.regularMarketVolume){ %>
                                <% volume=quotes.regularMarketVolume}}%>
                                    <div id="mktVol" class="indexData commas volume">
                                        <%=volume %>
                                    </div>
                </div>
                <div class="border-line no-border-bottom">
                    <div id="avgVolume">Avg. 10 Day Vol.</div>
                    <%let avgVol="N/A" %>
                        <% if(quotes){ %>
                            <% if(quotes.averageDailyVolume10Day){ %>
                                <% avgVol=quotes.averageDailyVolume10Day}}%>
                                    <div id="avgVol" class="indexData commas volume">
                                        <%=avgVol %>
                                    </div>
                </div>
            </div>
        </section>
        <section id="slide-container">
            <!-- If we need navigation buttons -->
            <div id="nav-buttons-container">
                <div class="slide-prev chevrons">
                    <img id='left-chev' src="/icons8-back-20.png" alt="left-chevron">
                </div>
                <div class="slide-next chevrons">
                    <img id="right-chev" src="/icons8-forward-20.png" alt="right-chevron">
                </div>
            </div>
            <!-- Slides -->
            <div class="slides-wrapper">
                <div id="income-statement" class="slide">
                    <h6>Income Statement</h6>
                    <div class="annual-label">Annual</div>
                    <div class="slide-boxes">
                        <div class="slide-data-wrapper income-slide-years slide-years">
                            <div class="slide-data slide-headers data-align-left currency">
                                <%=currencyCode %>
                            </div>
                            <div class="slide-data slide-headers ttm">TTM
                            </div>
                            <div class="slide-data slide-headers year1 endingyr1">
                                <%=incomeYr1%>
                            </div>
                            <div class="slide-data slide-headers year2 endingyr2">
                                <%=incomeYr2%>
                            </div>
                        </div>
                        <div class="slide-data-wrapper total-revenue">
                            <div class="slide-data data-align-left">
                                Revenue</div>
                            <div class="slide-data  ttm">
                                <%=ttmRev %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualRev1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=annualRev2 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper gross-profit">
                            <div class="slide-data data-align-left">Gross profit</div>

                            <div class="slide-data ttm">
                                <%=ttmGrossProfit %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualGrossProfit1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=annualGrossProfit2 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper operating-expense">
                            <div class="slide-data data-align-left">Operating expense</div>

                            <div class="slide-data  ttm">
                                <%=ttmOpExp %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualOpExp1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=annualOpExp2 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper operating-income">

                            <div class="slide-data data-align-left">
                                Operating income</div>
                            <div class="slide-data  ttm">
                                <%=ttmOpIncome %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualOpIncome1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=annualOpIncome2 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper pre-tax-income">
                            <div class="slide-data data-align-left">Pre tax income</div>
                            <div class="slide-data  ttm">
                                <%=ttmPreTaxInc %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualPreTaxInc1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=annualPreTaxInc2 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper other-income-expense">
                            <div class="slide-data data-align-left">Other income exp</div>
                            <div class="slide-data ttm">
                                <%=ttmOtherIncExp %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualOtherIncExp1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=annualOtherIncExp2 %>
                            </div>
                        </div>

                        <div class="slide-data-wrapper basic-eps">
                            <div class="slide-data data-align-left">Basic eps</div>

                            <div class="slide-data  ttm">
                                <%=ttmBasicEps %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualBasicEps1%>
                            </div>
                            <div class="slide-data year2">
                                <%=annualBasicEps2%>
                            </div>
                        </div>
                        <div class="slide-data-wrapper net-income">
                            <div class="slide-data data-align-left">Net income</div>

                            <div class="slide-data  ttmNetIncome">
                                <%=ttmNetIncome %>
                            </div>
                            <div class="slide-data year1">
                                <%=annualNetIncome1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=annualNetIncome2%>
                            </div>
                        </div>

                    </div>
                </div>
                <div id="balance-sheet" class="slide">
                    <h6>Balance Sheet</h6>
                    <div class="annual-label">Annual</div>
                    <div class="slide-boxes">
                        <div class="slide-data-wrapper balance-slide-years slide-years">

                            <div class="slide-data slide-headers data-align-left currency">
                                <%=currencyCode %>
                            </div>

                            <div class="slide-data slide-headers year1 endingyr1">
                                <%=balYr1 %>
                            </div>
                            <div class="slide-data slide-headers year2 endingyr2">
                                <%=balYr2 %>
                            </div>
                            <div class="slide-data slide-headers year3 endingyr3">
                                <%=balYr3%>
                            </div>
                        </div>
                        <div class="slide-data-wrapper total-assets">
                            <div class="slide-data data-align-left">Total assets</div>

                            <div class="slide-data year1">
                                <%=totalAssets1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=totalAssets2%>
                            </div>
                            <div class="slide-data year3">
                                <%=totalAssets3 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper total-liab">
                            <div class="slide-data data-align-left">Total liab.</div>

                            <div class="slide-data year1">
                                <%=totalLiab1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=totalLiab2 %>
                            </div>
                            <div class="slide-data year3">
                                <%=totalLiab3 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper total-equity">
                            <div class="slide-data data-align-left">Total equity</div>

                            <div class="slide-data year1">
                                <%=totalEqu1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=totalEqu2 %>
                            </div>
                            <div class="slide-data year3">
                                <%=totalEqu3 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper current-debt">
                            <div class="slide-data data-align-left">Current Debt</div>

                            <div class="slide-data year1">
                                <%=currentDebt1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=currentDebt2 %>
                            </div>
                            <div class="slide-data year3">
                                <%=currentDebt3 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper long-term-debt">
                            <div class="slide-data data-align-left">Long term debt</div>

                            <div class="slide-data year1">
                                <%=longTermDebt1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=longTermDebt2 %>
                            </div>
                            <div class="slide-data year3">
                                <%=longTermDebt3 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper working-capital">
                            <div class="slide-data data-align-left">Accts. receivable</div>

                            <div class="slide-data year1">
                                <%=acctsRecv1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=acctsRecv2 %>
                            </div>
                            <div class="slide-data year3">
                                <%=acctsRecv3 %>
                            </div>
                        </div>
                        <div class="slide-data-wrapper total-debt">
                            <div class="slide-data data-align-left">Accts. payable</div>

                            <div class="slide-data year1">
                                <%=acctsPay1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=acctsPay2%>
                            </div>
                            <div class="slide-data year3">
                                <%=acctsPay3 %>
                            </div>
                        </div>

                        <div class="slide-data-wrapper shares-issued">
                            <div class="slide-data data-align-left">Ret. Earnings</div>

                            <div class="slide-data year1">
                                <%=retEarn1 %>
                            </div>
                            <div class="slide-data year2">
                                <%=retEarn2 %>
                            </div>
                            <div class="slide-data year3">
                                <%=retEarn3 %>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="cash-flow" class="slide">
                    <h6>Cash Flow</h6>
                    <div class="annual-label">Annual</div>
                    <div id="cashflow-slide-boxes" class="slide-boxes">
                        <div class="slide-data-wrapper slide-years cash-flow-slide-years">
                            <div class="slide-data slide-headers data-align-left currency">
                                <%=currencyCode %>
                            </div>
                            <div class="slide-data slide-headers ttm">TTM</div>
                            <div class="slide-data slide-headers year1 endingyr1">

                            </div>
                            <div class="slide-data slide-headers year2 endingyr2">

                            </div>
                        </div>

                        <div class="slide-data-wrapper operating-cash-flow">
                            <div class="slide-data data-align-left">Operating cash</div>

                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper investing-cash-flow">
                            <div class="slide-data data-align-left">Investing cash</div>

                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper cash-dividends-paid">

                            <div class="slide-data data-align-left">
                                Cash dividends
                            </div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper end-cash-position">

                            <div class="slide-data data-align-left">
                                End cash pos.</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper capital-expenditure">


                            <div class="slide-data data-align-left">
                                Capital exp.
                            </div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper common-stock-iss">

                            <div class="slide-data data-align-left">
                                Common stock</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper repayment-of-debt">

                            <div class="slide-data data-align-left">
                                Repay debt</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                        <div class="slide-data-wrapper free-cash-flow">

                            <div class="slide-data data-align-left">
                                Free cash flow</div>
                            <div class="slide-data ttm">

                            </div>
                            <div class="slide-data year1">

                            </div>
                            <div class="slide-data year2">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </section>
        <div id="summary_profile_container">
            <div id="summary_container">
                <h6>Summary</h6>
                <p id="company_desc">
                    <%let resultLB="" %>
                        <% if(profile){ %>
                            <%if(profile.summaryProfile){ %>
                                <%resultLB=profile.summaryProfile.longBusinessSummary}}%>
                                    <%=resultLB%>
                </p>
            </div>
            <div id="profile_container">
                <% let h="" %>
                    <% if(profile){ %>
                        <%if(profile.summaryProfile){ %>
                            <%if(profile.summaryProfile.address1){ %>
                                <% h="Profile" }}}%>
                                    <h6>
                                        <%=h %>
                                    </h6>
                                    <div id="profile_container2">
                                        <div id="address_container">
                                            <p id="address">
                                                <%let resultAd="" %>
                                                    <% if(profile){ %>
                                                        <%if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.address1) %>
                                                                <%resultAd=profile.summaryProfile.address1}}%>
                                                                    <%=resultAd%>
                                            </p>
                                            <div id="city_state_container">
                                                <p id="city">
                                                    <%let resultCi="" %>

                                                        <% if(profile){ %>
                                                            <%if(profile.summaryProfile){ %>
                                                                <% if(profile.summaryProfile.city){ %>
                                                                    <%resultCi=profile.summaryProfile.city}}}%>
                                                                        <%=resultCi%>
                                                </p>
                                                <p id="state">
                                                    <%let resultSt="" %>
                                                        <% if(profile) {%>
                                                            <%if(profile.summaryProfile){ %>
                                                                <% if(profile.summaryProfile.state) %>
                                                                    <%resultSt=profile.summaryProfile.state}}%>
                                                                        <%=resultSt%>
                                                </p>
                                                <p id="zip">
                                                    <%let resultZ="" %>
                                                        <% if(profile){ %>
                                                            <%if(profile.summaryProfile){ %>
                                                                <% if(profile.summaryProfile.zip) %>
                                                                    <%resultZ=profile.summaryProfile.zip}}%>
                                                                        <%=resultZ%>
                                                </p>
                                            </div>

                                            <p id="country">
                                                <%let resultCoun="" %>
                                                    <% if(profile){ %>
                                                        <%if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.country) %>
                                                                <%resultCoun=profile.summaryProfile.country}}%>
                                                                    <%=resultCoun%>
                                            </p>
                                            <p id="phone">
                                                <%let resultPh="" %>
                                                    <% if(profile){ %>
                                                        <%if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.phone) %>
                                                                <%resultPh=profile.summaryProfile.phone}}%>
                                                                    <%=resultPh%>
                                            </p>
                                            <p id="website">
                                                <%let resultWeb="" %>
                                                    <% if(profile){ %>
                                                        <%if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.website){ %>
                                                                <%resultWeb=profile.summaryProfile.website}}}%>
                                                                    <a id="link" href="<%=resultWeb%>" target="_blank">
                                                                        <%=resultWeb%>
                                                                    </a>


                                            </p>
                                            <p id="industry">
                                                <%let rInd="" %>
                                                    <% if(profile){ %>
                                                        <%if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.industry){%>
                                                                <%rInd=profile.summaryProfile.industry%>
                                                                    <% rInd=`Industry: ${rInd}` }}}%>
                                                                        <%=rInd %>
                                            </p>
                                            <p id="sector">
                                                <%let rSec="" %>
                                                    <% if(profile){ %>
                                                        <%if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.sector){%>
                                                                <%rSec=profile.summaryProfile.sector%>
                                                                    <% rSec=`Sector: ${rSec}`}}} %>
                                                                        <%=rSec%>
                                            </p>
                                        </div>
                                        <div id="employee_container">
                                            <p>
                                                <% let emH="" %>
                                                    <% if(profile){ %>
                                                        <% if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.fullTimeEmployees){%>
                                                                <%emH="Full Time Employees:"%>
                                                                    <% }}} %>
                                                                        <%=emH%>
                                            </p>
                                            <p>
                                                <% let em="" %>
                                                    <% if(profile){ %>
                                                        <% if(profile.summaryProfile){ %>
                                                            <% if(profile.summaryProfile.fullTimeEmployees){%>
                                                                <% em=profile.summaryProfile.fullTimeEmployees}}} %>
                                                                    <%= em %>
                                            </p>
                                        </div>
                                    </div>

            </div>
        </div>
    </section>
    <footer id="ticker_footer">
        <%- include('./partials/footer.ejs') %>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
        const pageUrl = window.location.href;
        localStorage.setItem("url", pageUrl);
        const stockTicker = '<%=quotes.symbol%>';
        const quoteType = '<%=quoteType%>';
        const KEY = '<%=API_KEY%>';
        const HOST = '<%=RAPID%>';
        const NEWS = '<%=NEWS%>'
        const apiOptions = {
            method: "GET",
            headers: {
                "x-rapidapi-key": KEY,
                "x-rapidapi-host": HOST,
            },
        };

        const newsApiOptions = {
            method: "GET",
            headers: {
                "x-rapidapi-key": KEY,
                "x-rapidapi-host": NEWS,
            },
        }

        const regExp = /[a-zA-Z.^]/;
        const regExNums = /[0-9]/;

        const h2Box = document.querySelector("header>h2");
        const h2ChildNodes = h2Box.childNodes;
        const selection = window.getSelection();
        const regularHoursContainer = document.getElementById("reg_container");
        const pricePctContainers = document.querySelectorAll(".reg_hours_container");
        const regularPrice = document.getElementById("reg_hours_price");
        const regPointsPctContainer = document.querySelector("#reg_hours_pct_container");
        const afterHrsPrice = document.getElementById("after_hours_price");
        const afterPointsPctContainer = document.querySelector("#after_hours_pct_container");
        const afterHrsChange = document.getElementById("after_hours_change");
        const afterHrsPct = document.getElementById("after_hours_pct");
        const afterHoursContainer = document.querySelector("#after_container");
        const atCloseContainer = document.querySelector("#at_close_container");
        const afterHoursTimeContainer = document.querySelector("#after_hours_time_container");
        const pricesAndPercents = document.querySelectorAll(".price");
        const previousCloseElem = document.getElementById("prevClosData");
        const summaryProfileContainer = document.querySelector("#summary_profile_container");
        const companyDesc = document.querySelector("#company_desc");
        const ratioContainer = document.querySelector("#ratio-container");
        const prevCloseContainer = document.querySelector("#prev-close-container");
        const commas = document.querySelectorAll("#index_data_container > div > .border-line > .commas");
        const chartTimelineContainer = document.querySelector("#chart-timeline-container");
        const canvas = document.querySelector("#chart");
        let chart, timeoutId, currMktState, timeout = undefined, timeout2 = undefined, red = "#b11e31", green = "#148a61", afterHoursPrice;

        const progressBarContainer = document.getElementById('progress-bar-container');
        const progressBar = document.getElementById('progress-bar');

        const slideContainer = document.getElementById("slide-container");
        const slidesWrapper = document.querySelector('.slides-wrapper');
        const slides = Array.from(document.querySelectorAll(".slide"));
        const slideNavChevrons = Array.from(document.querySelectorAll(".chevrons"));

        //starting variables;
        let isDragging = false, startPosition = 0, currTranslateX = 0, prevTranslateX = 0, animationId = 0, currSlideIndex = 0;
        slides.forEach((slide, index) => {
            //touch events
            slide.addEventListener('touchstart', touchStart(index))
            slide.addEventListener('touchend', touchEnd);
            slide.addEventListener('touchmove', touchMove)
            //mouse events
            slide.addEventListener('mousedown', touchStart(index))
            slide.addEventListener('mouseup', touchEnd)
            slide.addEventListener('mouseleave', touchEnd)
            slide.addEventListener('mousemove', touchMove)
        })

        slideNavChevrons.forEach((chevron) => {
            chevron.addEventListener("click", () => {
                //next button
                let chevronDirection = chevron.classList.contains("slide-next");
                isDragging = true;
                animationId = requestAnimationFrame(animation);
                if (chevronDirection) {
                    if (currSlideIndex < slides.length - 1) {
                        currSlideIndex += 1
                    }
                }

                //prev button
                if (!chevronDirection) {
                    if (currSlideIndex > 0) {
                        currSlideIndex -= 1;
                    }
                }


                isDragging = false;
                cancelAnimationFrame(animationId);
                setPostionByIndex()
            })
        })

        function touchStart(index) {
            return function (event) {
                currSlideIndex = index;
                startPosition = getPositionX(event);

                isDragging = true;
                animationId = requestAnimationFrame(animation);
                slidesWrapper.style.cursor = "grabbing";
            }
        }

        function touchEnd() {
            isDragging = false;
            cancelAnimationFrame(animationId);
            const movedBy = currTranslateX - prevTranslateX;

            if (movedBy < -50 && currSlideIndex < slides.length - 1) {
                currSlideIndex += 1

            }
            if (movedBy > 50 && currSlideIndex > 0) currSlideIndex -= 1;
            setPostionByIndex()
            slidesWrapper.style.cursor = "grab";
        }

        function touchMove(event) {
            if (isDragging) {
                const currentPosition = getPositionX(event)
                currTranslateX = prevTranslateX + currentPosition - startPosition;

            }
        }

        function getPositionX(event) {
            return event.type.includes("mouse") ? event.pageX : event.touches[0].clientX;
        }

        function animation() {
            setSliderPosition()
            if (isDragging) requestAnimationFrame(animation)
        }

        function setSliderPosition() {
            slidesWrapper.style.transform = `translateX(${currTranslateX}%)`;
        }

        function setPostionByIndex() {
            currTranslateX = currSlideIndex * -105;
            prevTranslateX = currTranslateX;
            setSliderPosition()
        }

        const setMarketTime = (timeStamp, dateObj = "") => {
            let date, formatted;

            if (dateObj) {
                date = dateObj
            } else {
                date = new Date(timeStamp * 1000);
            }

            formatted = new Intl.DateTimeFormat('en-US', {
                dateStyle: 'short',
                timeStyle: 'long',
                timeZone: 'America/New_York',
            }).format(date)

            return formatted

        }

        const changePctPointsColor = (currentPrice, prevClosePrice) => {

            let currP, prevP;

            currP = parseFloat(currentPrice);
            prevP = parseFloat(prevClosePrice);

            regularPrice.style.color = green;
            regPointsPctContainer.children[0].style.color = green;
            regPointsPctContainer.children[1].style.color = green;

            if (currP < prevP) {
                regularPrice.style.color = red;
                regPointsPctContainer.children[0].style.color = red;
                regPointsPctContainer.children[1].style.color = red;
            }

            afterHrsPrice.style.color = green;
            afterHrsChange.style.color = green;
            afterHrsPct.style.color = green;


            if (afterHoursPrice < currP) {
                afterHrsPrice.style.color = red;
                afterHrsChange.style.color = red;
                afterHrsPct.style.color = red;
            }

        };
        const formatPrice = (container, divClass) => {
            let regExp = /[-]/;
            let regExNumb = /[a-z]/i;

            if (divClass === "reg_after_container") {
                let points = container.children[0].innerText;
                let pct = container.children[1].innerText;

                if (!regExp.test(points)) {
                    points = `+${points}`
                    pct = `+${pct}`
                }
                container.children[0].innerText = `${points}`;
                container.children[1].innerText = `(${pct}%)`;
            }

            if (divClass === "commas") {
                for (let ele of container) {
                    let text = ele.innerText;
                    let regExDeci = /[.]/g, numbStr, denomination = "", startIndex = 0, endIndex;

                    if (!regExNumb.test(text)) {
                        let formatted = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(text);
                        numbStr = formatted;

                        //format volume figures only;
                        let classListArr = Array.from(ele.classList);
                        if (classListArr.includes("volume")) {
                            //count the decimals
                            let commaCheck = formatted.replaceAll(",", ".");
                            let decimals = commaCheck.match(regExDeci);
                            if (decimals.length > 2) {

                                //abbreviate formatted number (ie "B" or "T");
                                //locate the 2nd decimal's index
                                let firstSearch = ".";
                                let firstIndexofDecimal = commaCheck.indexOf(firstSearch);
                                let secondIndexofDecimal = commaCheck.indexOf(firstSearch, firstIndexofDecimal + 1);
                                endIndex = secondIndexofDecimal; //2nd decimal
                                //slice up to the 2nd decimal, excluding it.
                                formatted = commaCheck.slice(startIndex, endIndex);
                                //format 

                                formatted = new Intl.NumberFormat('en-US', { maximumSignificantDigits: 5, minimumSignificantDigits: 3 }).format(
                                    formatted
                                );

                                if (decimals.length === 5) {
                                    denomination = "T"
                                }
                                if (decimals.length === 4) {
                                    denomination = "B"
                                } if (decimals.length === 3) {
                                    denomination = "M"
                                }
                                numbStr = `${formatted}${denomination}`;
                            }
                        }

                        ele.innerText = numbStr;
                    }
                }

            }
            return
        };
        const setSession = (res) => {
            return new Promise((resolve) => {

                const sessionObj = res.chart.result[0];

                //current market session period;
                const currTradingPeriod = sessionObj.meta.currentTradingPeriod;
                let regTime = currTradingPeriod.regular;
                let preTime = currTradingPeriod.pre;
                let postTime = currTradingPeriod.post;

                //previous closing price;
                let previousClose = '<%=previousClose%>';
                previousClose = parseFloat(previousClose);

                let formatted = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(previousClose)
                previousCloseElem.innerText = formatted;

                const timeStampsArr = sessionObj.timestamp;
                const quotesArr = sessionObj.indicators.quote[0];
                const openPriceArr = quotesArr.open;
                const closePriceArr = quotesArr.close;
                let ending = timeStampsArr.length - 1, regDateTime = "", currPrice, prePostMarketState = "";

                //pre/post mkt price;
                let afterHoursPointsChng, afterHoursPctChng, regPointsChg, regPctChng;

                //set session time(s)
                let regMarketTime = sessionObj.meta.regularMarketTime;
                let timeStampEnding = timeStampsArr[ending];

                regDateTime = "At Close:";
                currPrice = sessionObj.meta.regularMarketPrice;
                let currency = sessionObj.meta.currency;

                //what's the current mkt session time/date?
                //current session;
                if (regMarketTime >= regTime.start && regMarketTime < regTime.end) {
                    regDateTime = "Current Session:"
                }
                //calculate reg-mkt points and percentage changes;
                regPointsChg = currPrice - previousClose;
                regPointsChg = regPointsChg.toFixed(2);

                regPctChng = (regPointsChg / previousClose) * 100;
                regPctChng = regPctChng.toFixed(2);

                //format prices:
                currPrice = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(currPrice);
                regPointsChg = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(regPointsChg);
                regPctChng = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(regPctChng);

                regularPrice.innerText = currPrice;
                regPointsPctContainer.children[0].innerText = regPointsChg;
                regPointsPctContainer.children[1].innerText = regPctChng;

                atCloseContainer.children[0].innerText = regDateTime;
                atCloseContainer.children[1].innerText = setMarketTime(regMarketTime);

                const analysis = '<%=analysis%>'
                if (analysis) {

                    let preMarketPrice = '<%=preMarketPrice%>';
                    let preMarketChange = '<%=preMarketChange%>'
                    let preMarketChangePercent = '<%=preMarketChangePercent%>'

                    let postMarketPrice = '<%=postMarketPrice%>';
                    let postMarketChange = '<%=postMarketChange%>'
                    let postMarketChangePercent = '<%=postMarketChangePercent%>'
                    console.log("regmarkettime:", regMarketTime, "regTime.start:", regTime.start)
                    console.log("post time.end:", postTime.end)
                    if (regMarketTime >= preTime.start && regMarketTime < preTime.end) {
                        prePostMarketState = "Pre-Market:"
                        console.log("pre")

                        if (preMarketPrice.raw) {
                            afterHoursPrice = preMarketPrice.raw
                        }
                        if (preMarketChange.raw) {
                            afterHoursPointsChng = preMarketChange.raw
                        }
                        if (preMarketChangePercent.raw) {
                            afterHoursPctChng = preMarketChangePercent.raw
                        }
                    }

                    if (regMarketTime >= regTime.end && regMarketTime <= postTime.end || regMarketTime < preTime.start && regMarketTime < regTime.start) {
                        prePostMarketState = "After Hours:"
                        console.log("post")
                        if (timeStampEnding < regMarketTime) timeStampEnding = regMarketTime;
                        if (postMarketPrice) {
                            if (postMarketPrice.raw) {
                                afterHoursPrice = postMarketPrice.raw
                            }
                        }
                        if (postMarketChange) {
                            if (postMarketChange.raw) {
                                afterHoursPointsChng = postMarketChange.raw
                            }
                        }
                        if (postMarketChangePercent) {
                            if (postMarketChangePercent.raw) {
                                afterHoursPctChng = postMarketChangePercent.raw
                            }
                        }
                    }

                }

                //****Pre/Post Mkt:
                if (!afterHoursPrice) {
                    afterHoursPrice = closePriceArr[ending]
                }

                afterHoursPointsChng = afterHoursPrice - currPrice;
                afterHoursPctChng = (afterHoursPointsChng / currPrice) * 100;
                afterHoursPrice = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(afterHoursPrice);
                afterHoursPointsChng = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(afterHoursPointsChng);
                afterHoursPctChng = new Intl.NumberFormat("en-US", { style: "decimal", maximumFractionDigits: 2, minimumFractionDigits: 2 }).format(afterHoursPctChng);

                afterHrsPrice.innerText = afterHoursPrice;
                afterHrsChange.innerText = afterHoursPointsChng;
                afterHrsPct.innerText = afterHoursPctChng;
                afterHoursTimeContainer.children[0].innerText = prePostMarketState;
                afterHoursTimeContainer.children[1].innerText = setMarketTime(timeStampEnding);
                //remove elements if necessary;
                if (regDateTime === "Current Session:" || quoteType !== "EQUITY") {
                    afterHoursContainer.style.display = "none";
                }

                if (quoteType !== "EQUITY") {
                    slideContainer.style.display = "none";
                    ratioContainer.style.display = "none";
                    prevCloseContainer.style.maxWidth = "100%";
                }

                if (companyDesc.innerText === "") {
                    summaryProfileContainer.style.display = "none";

                }
                resolve("done")
            })
        }
        const grabChartData = async (symbol, range) => {
            let url;
            switch (range) {
                case "1d":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=5m&region=US&symbol=${symbol}&range=1d`

                case "5d":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=60m&region=US&symbol=${symbol}&range=5d`
                    break;
                case "1mo":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=1d&region=US&symbol=${symbol}&range=1mo`
                    break;
                case "YTD":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=1d&region=US&symbol=${symbol}&range=ytd`
                    break;
                case "2y":
                    url = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?interval=1d&region=US&symbol=${symbol}&range=2y`
                    break;
                default:
                    console.log("Range not found");
                    break;
            }

            const apiOptions = {
                method: "GET",
                headers: {
                    "X-RapidAPI-Key": KEY,
                    "X-RapidAPI-Host": HOST,
                },
            };

            let response = await fetch(url, apiOptions).catch((e) => console.log(e));
            response = await response.json();
            return response;
        };
        const fillChartData = async (responseData, range) => {
            let chartResp, chartTimes, closeQuote, openQuote;

            console.log("responseData:", responseData)

            let chartData = {
                datasets: [
                    {
                        label: "",
                        data: [],
                        borderColor: "",
                        backgroundColor: "",
                        tension: 0.1,
                        pointRadius: 0,
                    },
                ],
                labels: [],
            };

            chartResp = responseData.chart.result[0];
            chartTimes = responseData.chart.result[0].timestamp;
            openQuote = responseData.chart.result[0].indicators.quote[0].open;
            closeQuote = responseData.chart.result[0].indicators.quote[0].close;
            //Iterate over timestamp array, start from the last one, go backwards;
            let timestampEnd = chartTimes.length - 1;

            //return chartdata object;
            //start from the last one and go backwards;
            let firstChartPrice, finalChartPrice, nextTimestamp, regMarketTime, date, formatted;
            for (let i = timestampEnd; i >= 0; i--) {
                regMarketTime = chartTimes[i];

                date = new Date(regMarketTime * 1000);

                formatted = new Intl.DateTimeFormat("en-US", {
                    dateStyle: "short",
                    timeStyle: "long",
                    timeZone: "America/New_York",
                }).format(date);

                let labelDate = formatted;
                let mktPrice = closeQuote[i]; //closing price;

                //get next element date info;
                let nextDateCreate, nextDate, nextFormattedTime;
                if (chartTimes[i - 1] !== undefined) {
                    nextTimestamp = chartTimes[i - 1];
                    nextTimestamp *= 1000;
                    nextDateCreate = new Date(nextTimestamp);
                    nextDate = nextDateCreate.getDate();
                }

                //curr timestamp
                let currHours = date.getHours();
                let currMin = date.getMinutes();
                let currDate = date.getDate();
                //curr mkt open timestamp;
                let marketOpen = chartResp.meta.currentTradingPeriod.regular.start;
                let mktOpenDate = new Date(marketOpen * 1000);

                //mkt open;
                let mktHourOpen = mktOpenDate.getHours();
                let mktMinsOpen = mktOpenDate.getMinutes();

                //check if curr timestamp is market open;
                if (mktHourOpen === currHours && mktMinsOpen === currMin) {
                    mktPrice = openQuote[i];
                }

                chartData.datasets[0].data.unshift(mktPrice);
                chartData.labels.unshift(labelDate);

                //set color of line chart here;
                let latestPrice = chartData.datasets[0].data.length - 1;
                latestPrice = chartData.datasets[0].data[latestPrice];
                let earliestPrice = chartData.datasets[0].data[0];

                if (latestPrice >= earliestPrice) {
                    chartData.datasets[0].backgroundColor = green;
                    chartData.datasets[0].borderColor = green;
                } else {
                    chartData.datasets[0].backgroundColor = red;
                    chartData.datasets[0].borderColor = red;
                }

                if (range === "1d") {
                    if (currDate !== nextDate) {
                        return chartData
                    }
                }
            }
            return chartData;
        };
        const runChart = async (range) => {
            let currPrice, previousClose;
            progressBarContainer.style.display = "initial"
            let stockChart = document.querySelector("#chart");
            stockChart.style.display = "none";

            let grabchart, fillchart, response;
            response = await grabChartData(stockTicker, range).then((res) => { return res }).catch((e) => console.log(e));
            console.log("response:", response)
            currPrice = response.chart.result[0].meta.regularMarketPrice;
            previousClose = '<%=previousClose%>'

            //set session
            if (range === "1d") {
                setSession(response).then(() => formatPrice(regPointsPctContainer, "reg_after_container")).then(() => formatPrice(afterPointsPctContainer, "reg_after_container"))
                    .catch((e) => console.log(e))
            }

            fillchart = await fillChartData(response, range).then((res) => { return res }).catch((e) => console.log(e));
            changePctPointsColor(currPrice, previousClose);
            progressBarContainer.style.display = "none"
            stockChart.style.display = "initial";

            let chartResult = fillchart, options;

            options = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        grid: {
                            display: true,
                            color: "black"
                        }
                    },
                    x: {
                        display: true,
                        grid: {
                            display: false
                        },
                        ticks: {
                            major: {
                                enabled: true
                            },
                            callback: (index) => {
                                let label = chartResult.labels[index], labelStr, str1, str2, regExprColon = /[:]/, regExpComma = /[,]/, startIndex = 0, endIndex;
                                let colonIndex = label.search(regExprColon), commaIndex = label.search(regExpComma);

                                if (range === "1d") {
                                    startIndex = commaIndex + 2;
                                    endIndex = colonIndex + 3;
                                    str2 = label.slice(-6);
                                } else {
                                    startIndex = 0;
                                    endIndex = commaIndex;
                                    str2 = ""
                                }

                                str1 = label.slice(startIndex, endIndex);

                                labelStr = `${str1} ${str2}`;

                                return labelStr
                            }
                        },
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    labels: {
                        font: {
                            size: 9
                        }
                    }
                },
                animations: {
                    radius: {
                        duration: 600,
                        easing: 'linear',
                        loop: true,
                        radius: 1,
                    }
                },

                interaction: {
                    mode: 'nearest',
                    intersect: false,
                    axis: 'x'
                }
            }

            const config = {
                type: "line",
                data: chartResult,
                options: options
            }

            chart = new Chart(canvas, config);

            return chart
        }
        const runProgressBar = (range) => {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            progressBar.setAttribute("class", "run-progress-animation");

            //settimeout allows for animation to run for a bit;
            timeoutId = setTimeout(() => {
                runChart(range).then(() => {
                    if (quoteType === "EQUITY") {
                        populateNews(stockTicker);

                    }
                }).then(() => {
                    if (quoteType === "EQUITY") {
                        populateCashFlowData(stockTicker);
                    }
                }).catch((e) => console.log(e));
            }, 0)
        }
        const getCashFlow = async (symbol) => {
            const cashFlowStURL = `https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-cash-flow?symbol=${symbol}&region=US`;
            const response = await fetch(cashFlowStURL, apiOptions).then((r) => { return r }).catch((e) => console.log(e));
            const result = await response.json();
            return result
        }

        let checkStmtProp = (property) => {
            return property && property.reportedValue.fmt
                ? property.reportedValue.fmt
                : "n/a";
        };
        const populateCashFlowData = async (symbol) => {
            let cashJsonData = await getCashFlow(symbol);
            cashJsonData = cashJsonData.timeSeries;
            console.log(cashJsonData);

            //set years
            let cashTimeStampsArr = cashJsonData.timestamp;
            let timestampLength = cashTimeStampsArr.length;

            let cashYr1 = cashTimeStampsArr[timestampLength - 1];
            let cashYr2 = cashTimeStampsArr[timestampLength - 2];
            cashYr1 = new Date(cashYr1 * 1000);
            cashYr2 = new Date(cashYr2 * 1000);
            cashYr1 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(cashYr1);
            cashYr2 = Intl.DateTimeFormat("en-US", { dateStyle: "short" }).format(cashYr2);
            document.querySelector(".cash-flow-slide-years > .year1").innerText = cashYr1;
            document.querySelector(".cash-flow-slide-years > .year2").innerText = cashYr2;

            //operating cash flow
            let ttmOpCash, opCashYr1, opCashYr2;
            ttmOpCash = checkStmtProp(cashJsonData.trailingOperatingCashFlow[0]);
            opCashYr1 = checkStmtProp(cashJsonData.annualOperatingCashFlow[timestampLength - 1]);
            opCashYr2 = checkStmtProp(cashJsonData.annualOperatingCashFlow[timestampLength - 2]);
            document.querySelector(".operating-cash-flow > .ttm").innerText = ttmOpCash;
            document.querySelector(".operating-cash-flow > .year1").innerText = opCashYr1;
            document.querySelector(".operating-cash-flow > .year2").innerText = opCashYr2;


            //investing-cash-flow
            let ttmInvCF, invCFYr1, invCFYr2;
            ttmInvCF = checkStmtProp(cashJsonData.trailingInvestingCashFlow[0]);
            invCFYr1 = checkStmtProp(cashJsonData.annualInvestingCashFlow[timestampLength - 1]);
            invCFYr2 = checkStmtProp(cashJsonData.annualInvestingCashFlow[timestampLength - 2]);
            document.querySelector(".investing-cash-flow > .ttm").innerText = ttmInvCF;
            document.querySelector(".investing-cash-flow > .year1").innerText = invCFYr1;
            document.querySelector(".investing-cash-flow > .year2").innerText = invCFYr2;

            //cash dividends
            let ttmCashDivs, cashDivsYr1, cashDivsYr2;
            ttmCashDivs = checkStmtProp(cashJsonData.trailingCashDividendsPaid[0]);
            cashDivsYr1 = checkStmtProp(cashJsonData.annualCashDividendsPaid[timestampLength - 1]);
            cashDivsYr2 = checkStmtProp(cashJsonData.annualCashDividendsPaid[timestampLength - 2]);
            document.querySelector(".cash-dividends-paid > .ttm").innerText = ttmCashDivs;
            document.querySelector(".cash-dividends-paid > .year1").innerText = cashDivsYr1;
            document.querySelector(".cash-dividends-paid > .year2").innerText = cashDivsYr2;

            //end-cash-position
            let ttmEndCashPos, endCashPosYr1, endCashPosY2;
            ttmEndCashPos = checkStmtProp(cashJsonData.trailingEndCashPosition[0]);
            endCashPosYr1 = checkStmtProp(cashJsonData.annualEndCashPosition[timestampLength - 1]);
            endCashPosY2 = checkStmtProp(cashJsonData.annualEndCashPosition[timestampLength - 2]);
            document.querySelector(".end-cash-position > .ttm").innerText = ttmEndCashPos;
            document.querySelector(".end-cash-position > .year1").innerText = endCashPosYr1;
            document.querySelector(".end-cash-position > .year2").innerText = endCashPosY2;

            //capital-expenditure
            let ttmCapEx, capExYr1, capExY2;
            ttmCapEx = checkStmtProp(cashJsonData.trailingCapitalExpenditure[0]);
            capExYr1 = checkStmtProp(cashJsonData.annualCapitalExpenditure[timestampLength - 1]);
            capExY2 = checkStmtProp(cashJsonData.annualCapitalExpenditure[timestampLength - 2]);
            document.querySelector(".capital-expenditure > .ttm").innerText = ttmCapEx;
            document.querySelector(".capital-expenditure > .year1").innerText = capExYr1;
            document.querySelector(".capital-expenditure > .year2").innerText = capExY2;

            //common-stock-iss
            let ttmcommStockIss, commStockIssYr1, commStockIssY2;
            ttmcommStockIss = checkStmtProp(cashJsonData.trailingCommonStockIssuance[0]);
            commStockIssYr1 = checkStmtProp(cashJsonData.annualCommonStockIssuance[timestampLength - 1]);
            commStockIssY2 = checkStmtProp(cashJsonData.annualCommonStockIssuance[timestampLength - 2]);
            document.querySelector(".common-stock-iss > .ttm").innerText = ttmcommStockIss;
            document.querySelector(".common-stock-iss > .year1").innerText = commStockIssYr1;
            document.querySelector(".common-stock-iss > .year2").innerText = commStockIssY2;

            //repayment-of-debt
            let ttmRepayDebt, repayDebtYr1, repayDebtY2;
            ttmRepayDebt = checkStmtProp(cashJsonData.trailingRepaymentOfDebt[0]);
            repayDebtYr1 = checkStmtProp(cashJsonData.annualRepaymentOfDebt[timestampLength - 1]);
            repayDebtY2 = checkStmtProp(cashJsonData.annualRepaymentOfDebt[timestampLength - 2]);
            document.querySelector(".repayment-of-debt > .ttm").innerText = ttmRepayDebt;
            document.querySelector(".repayment-of-debt > .year1").innerText = repayDebtYr1;
            document.querySelector(".repayment-of-debt > .year2").innerText = repayDebtY2;

            //free-cash-flow
            let ttmFreeCashFlow, freeCashFlowYr1, freeCashFlowY2;
            ttmFreeCashFlow = checkStmtProp(cashJsonData.trailingFreeCashFlow[0]);
            freeCashFlowYr1 = checkStmtProp(cashJsonData.annualFreeCashFlow[timestampLength - 1]);
            freeCashFlowY2 = checkStmtProp(cashJsonData.annualFreeCashFlow[timestampLength - 2]);
            document.querySelector(".free-cash-flow > .ttm").innerText = ttmFreeCashFlow;
            document.querySelector(".free-cash-flow > .year1").innerText = freeCashFlowYr1;
            document.querySelector(".free-cash-flow > .year2").innerText = freeCashFlowY2;
        }
        const getNews = async (symbol) => {
            const url = `https://real-time-finance-data.p.rapidapi.com/stock-news?symbol=${symbol}%3ANASDAQ&language=en`;
            let response,
                result
            try {
                response = await fetch(url, newsApiOptions);
                result = await response.json();
            } catch (error) {
                console.error(error);
            }
            return result
        }
        function getRandomInt(max) {
            return Math.floor(Math.random() * max);
        }

        const populateNews = async (symbol) => {
            let news = await getNews(symbol).then((res) => { return res }).catch((e) => console.log(e));

            let newsArr = news.data.news;
            let title, articleUrl, source, date;
            let length = newsArr.length - 1;
            let i = getRandomInt(length);
            let curr = newsArr[i];
            while (curr === null || curr === undefined) {
                i = getRandomInt(length);
                curr = newsArr[i];
            }

            title = curr.article_title;
            articleUrl = curr.article_url;
            source = curr.source;
            date = curr.post_time_utc;
            let dateOb = new Date(date);
            let hr = dateOb.getHours();
            let dateOfMonth = dateOb.getDate();
            console.log(hr, dateOfMonth)
            const insightContainer = document.querySelector("#insights-container");
            if (news) {
                document.querySelector("#article-title").innerText = `"${title}"`;
                document.querySelector("#article-source > #article-link").setAttribute("href", articleUrl)
                document.querySelector("#article-source > #article-link").innerText = source;

                console.log("date:", date, typeof date)
                document.querySelector("#article-time").innerText = `${date} UTC`;
            } else {
                insightContainer.style.display = "none";
            }

        }


        /**
                const idlePage = () => {
                    if (timeout) {
                        clearInterval(timeout);
                    }
                    timeout = setInterval(() => {
                        location.reload();
                    }, 60000);
                }
                const activePage = () => {
                    if (timeout2) clearInterval(timeout2);
                    timeout2 = setTimeout(async () => {
                        await getRapidPrices(apiKey, stockTicker);
                        formatPrice(pricesAndPercents);
                        changePctPointsColor(pricePctContainers);
                        console.log("active");
                    }, 180000);
                }
        */

        const setEventListeners = () => {
            //timeline links: 1d 5d ytd 1y 2yr
            let timelineLinks = chartTimelineContainer.children;

            timelineLinks[0].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("1d");
            });

            timelineLinks[1].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("5d");
            });

            timelineLinks[2].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("1mo");
            });

            timelineLinks[3].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("YTD");
            });

            timelineLinks[4].addEventListener("click", () => {
                chart.destroy();
                runProgressBar("2y");
            });

            // document.addEventListener("click", idlePage);
            // document.addEventListener("keypress", idlePage);
            // document.addEventListener("mousemove", idlePage);
            // document.addEventListener("scroll", idlePage);

            h2Box.addEventListener("focus", () => {
                const h2ChildNodes = h2Box.childNodes;
                const selection = window.getSelection();
                if (h2Box.innerText === "Enter ticker...") {
                    h2Box.innerText = "";
                }
                //set caret position after text node
                if (h2ChildNodes.length > 0) {
                    selection.setPosition(h2ChildNodes[0], h2ChildNodes[0].length);
                } else {
                    selection.setPosition(h2Box, 0);
                }

                return;
            });
            h2Box.addEventListener("focusout", () => {
                if (h2Box.innerText === "") h2Box.innerText = "Enter ticker...";
                if (h2Box.style.backgroundColor === "#15192f") {
                    h2Box.style.backgroundColor === "#012c12";
                }
            });
            h2Box.addEventListener("keydown", (e) => {
                const textString = h2Box.innerText;
                if (textString.length >= 5 && e.key !== "Backspace" && e.key !== "Enter") {
                    e.preventDefault();
                    alert("Character amount exceeded");
                }
                //prevent navigation keys;
                if (textString.length > 0) {
                    let navKeys = [
                        "ArrowLeft",
                        "ArrowRight",
                        "ArrowDown",
                        "ArrowUp",
                        "Left",
                        "Right",
                        "Up",
                        "Down",
                        "Home",
                        "End",
                        "Del",
                        "Delete",
                        "PageUp",
                        "PageDown",
                        "Insert",
                    ];

                    for (const ele of navKeys) {
                        if (e.key === ele) {
                            e.preventDefault();
                            alert("Invalid entry");
                        }
                    }

                    if (textString === "" && e.key === "Enter") {
                        e.preventDefault();
                        alert("enter a valid ticker");
                    }

                    if (e.key === "Enter" && textString !== "") {
                        //enter the ticker string into the url parameter
                        //grab the URL;
                        //grab url param instead of string of element;
                        //window.location.href
                        let url = '<%=CURR_DOMAIN%>'

                        url = `${url}${textString}`
                        console.log(url);
                        //check ticker string
                        window.location.href = url;
                    }
                }
                //prevent non-letters
                //Allow Backspace, Enter keys;
                //Note: navigation keys are failing the regexp test;
                if (regExp.test(e.key) === false) {
                    if (e.key !== "Backspace" && e.key !== "Enter") {
                        e.preventDefault();
                        alert("Invalid entry");
                    }
                }
            });
        }

        h2Box.focus();
        ratioContainer.removeAttribute("style");
        afterHoursContainer.removeAttribute("style");
        summaryProfileContainer.removeAttribute("style");
        runProgressBar("1d");
        setEventListeners();
        formatPrice(commas, "commas");

        //set interval to fetch/grab chart data "1d", and set session for periodic price update
    </script>

</body>

</html>