<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/head.ejs') %>
</head>

<body id="ticker_body">
    <header class="headerBox">
        <h2 contenteditable></h2>
    </header>

    <section id="stock_price_container">
        <div id="home-chart-container">
            <div id="home-price-container">
                <div id="home_link_container">
                    <a href="http://localhost:3000" target="_self">Home</a>
                    <span id="arrow">></span>
                    <span id="symbol">
                        <%=checkSymbol.price.symbol%>
                    </span>
                </div>
                <div id="price_hours_container">
                    <h5 id="company_name">
                        <% const longName=checkSymbol.price.longName %>
                            <% const shortName=checkSymbol.price.shortName %>
                                <% let name=longName ? longName:shortName%>
                                    <%= name %>
                    </h5>
                    <div id="price_time_container">
                        <div id="reg_container" class="reg_after_container">
                            <div id="reg_hours_container" class="reg_after_hours_container">
                                <h3 id="reg_hours_price" class="price">
                                    <% let regMkPr=checkSymbol.price.regularMarketPrice%>
                                        <%=regMkPr%>
                                </h3>
                                <div class="hours_pct_container">
                                    <h5 id="reg_hours_change" class="price">
                                        <% let regMktChange=checkSymbol.price.regularMarketChange%>
                                            <%=regMktChange%>
                                    </h5>
                                    <h5 id="reg_hours_pct" class="price">
                                        <%let regMktChgPct=checkSymbol.price.regularMarketChangePercent%>
                                            <%=regMktChgPct%>
                                    </h5>
                                </div>
                            </div>
                            <div id="at_close_container" class="trading_hours_container">
                                <h6 id="at_close_txt"></h6>
                                <h6 id="at_close_time"></h6>
                            </div>
                        </div>
                        <div id="after_container" class="reg_after_container">
                            <div id="after_hours_pp_container" class="reg_after_hours_container">
                                <h5 id="after_hours_price" class="price">
                                    <% let postMktPrc=checkSymbol.price.postMarketPrice%>
                                        <% let preMktPrc=checkSymbol.price.preMarketPrice%>
                                            <%if(postMktPrc===undefined && preMktPrc !==undefined){ %>
                                                <% postMktPrc=preMktPrc} %>
                                                    <%=postMktPrc%>
                                </h5>
                                <div class="hours_pct_container">
                                    <h6 id="after_hours_change" class="price">
                                        <% let postMktChange=checkSymbol.price.postMarketChange %>
                                            <%=postMktChange%>
                                    </h6>
                                    <h6 id="after_hours_pct" class="price">
                                        <% let postMktChangePct=checkSymbol.price.postMarketChangePercent%>
                                            <%= postMktChangePct%>
                                    </h6>
                                </div>
                            </div>
                            <div id="after_hours_time_container" class="trading_hours_container">
                                <h6 id="after_hours_txt"></h6>
                                <h6 id="after_hours_time"></h6>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="chart_container">
                <canvas id="chart" class="charts"></canvas>
            </div>
            <div id="chart-timeline-container">
                <h6 class="timeline-link oneDay">1D</h6>
                <h6 class="timeline-link fiveDay">5D</h6>
                <h6 class="timeline-link oneMonth">1M</h6>
                <h6 class="timeline-link ytd">YTD</h6>
                <h6 class="timeline-link threeYr">3Y</h6>
            </div>
        </div>
        <section id="index_data_container" class="index_data_container">
            <div id="ratio-container" class="index-data-kids">
                <div class="border-line">
                    <div id="fwdPeRatio">Forward P/E</div>
                    <% let fwdPeRatio="N/A" %>
                        <% if(checkSymbol.defaultKeyStatistics){ %>
                            <% if(checkSymbol.defaultKeyStatistics.forwardPE){ %>
                                <% fwdPeRatio=checkSymbol.defaultKeyStatistics.forwardPE}} %>
                                    <div id="fwdPeRatioData" class="indexData">
                                        <%=fwdPeRatio %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="ttmPeRatio">P/E (TTM)</div>
                    <% let ttmPeRatio="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.trailingPE){ %>
                                <% ttmPeRatio=checkSymbol.summaryDetail.trailingPE}} %>
                                    <div id="ttmPeRatioData" class="indexData">
                                        <%=ttmPeRatio %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="eps">EPS (TTM)</div>
                    <% let eps="N/A" %>
                        <% if(checkSymbol.defaultKeyStatistics){ %>
                            <% if(checkSymbol.defaultKeyStatistics.trailingEps){ %>
                                <% eps=checkSymbol.defaultKeyStatistics.trailingEps}} %>
                                    <div id="epsData" class="indexData">
                                        <%=eps%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="peg-ratio">Peg Ratio</div>
                    <% let pegRatio="N/A" %>

                        <% if(checkSymbol.defaultKeyStatistics){ %>
                            <% if(checkSymbol.defaultKeyStatistics.pegRatio){ %>
                                <% pegRatio=checkSymbol.defaultKeyStatistics.pegRatio}} %>
                                    <div id="pegRatio" class="indexData">
                                        <%=pegRatio%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="curr-ratio">Current Ratio</div>
                    <% let currRatio="N/A" %>

                        <% if(checkSymbol.financialData){ %>
                            <% if(checkSymbol.financialData.currentRatio){ %>
                                <% currRatio=checkSymbol.financialData.currentRatio}} %>
                                    <div id="curr-ratio" class="indexData">
                                        <%=currRatio%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="quick-ratio">Quick Ratio</div>
                    <% let quickRatio="N/A" %>

                        <% if(checkSymbol.financialData){ %>
                            <% if(checkSymbol.financialData.quickRatio){ %>
                                <% quickRatio=checkSymbol.financialData.quickRatio}} %>
                                    <div id="quick-ratio" class="indexData">
                                        <%=quickRatio%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="debt-ratio">Debt-to-Equity Ratio</div>
                    <% let debtRatio="N/A" %>
                        <% if(checkSymbol.financialData){ %>
                            <% if(checkSymbol.financialData.debtToEquity){ %>
                                <% debtRatio=checkSymbol.financialData.debtToEquity}}%>
                                    <div id="debt-ratio" class="indexData">
                                        <%=debtRatio%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="pb-ratio">Price-to-Book Ratio</div>
                    <% let pb="N/A" %>
                        <% if(checkSymbol.defaultKeyStatistics){ %>
                            <% if(checkSymbol.defaultKeyStatistics.priceToBook){ %>
                                <% pb=checkSymbol.defaultKeyStatistics.priceToBook}} %>
                                    <div id="pb-ratio" class="indexData">
                                        <%=pb%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="op-Margin">Operating Margin</div>
                    <% let opMargin="N/A" %>
                        <% if(checkSymbol.financialData){ %>
                            <% if(checkSymbol.financialData.operatingMargins){ %>
                                <% opMargin=checkSymbol.financialData.operatingMargins}} %>
                                    <div id="op-Margin" class="indexData">
                                        <%=opMargin%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="prof-Margin">Profit Margin</div>
                    <% let profMargin="N/A" %>
                        <% if(checkSymbol.financialData){ %>
                            <% if(checkSymbol.financialData.profitMargins){ %>
                                <% profMargin=checkSymbol.financialData.profitMargins}} %>
                                    <div id="prof-Margin" class="indexData">
                                        <%=profMargin%>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="grossMargin">Gross Margin</div>
                    <% let grossMargin="N/A" %>
                        <% if(checkSymbol.financialData){ %>
                            <% if(checkSymbol.financialData.grossMargins){ %>
                                <% grossMargin=checkSymbol.financialData.grossMargins}} %>
                                    <div id="grossMarginPct" class="indexData">
                                        <%=grossMargin %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="dividend">Forward Dividend</div>
                    <div id="dividendRate" class="indexData div-rate">
                    </div>
                </div>
                <div class="border-line no-border-bottom">
                    <div id="exDividend">Ex-Dividend Date</div>

                    <div id="exDivDate" class="indexData exDivDate">

                    </div>
                </div>
            </div>
            <div id="prev-close-container" class="index-data-kids">
                <div class="border-line">
                    <div id="prevClose">Previous Close</div>
                    <% let prvClose="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.previousClose){ %>
                                <% prvClose=checkSymbol.summaryDetail.previousClose}} %>
                                    <div id="prevClosData" class="indexData">
                                        <%=prvClose %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="open">Market Open</div>
                    <% let open="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.open){ %>
                                <% open=checkSymbol.summaryDetail.open}} %>
                                    <div id="openData" class="indexData">
                                        <%=open %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="dayLow">Day's Low</div>
                    <% let dayLow="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.dayLow){ %>
                                <% dayLow=checkSymbol.summaryDetail.dayLow}} %>
                                    <div id="dayLowData" class="indexData">
                                        <%=dayLow %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="dayHigh">Day's High</div>
                    <% let dayHigh="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.dayHigh){ %>
                                <% dayHigh=checkSymbol.summaryDetail.dayHigh}} %>
                                    <div id="dayHighData" class="indexData">
                                        <%=dayHigh %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="fifty2WkLow">52 Week Low</div>
                    <% let fifty2WkLo="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.fiftyTwoWeekLow){ %>
                                <% fifty2WkLo=checkSymbol.summaryDetail.fiftyTwoWeekLow} }%>
                                    <div id="fifty2WkLowData" class="indexData">
                                        <%=fifty2WkLo %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="fifty2WkHigh">52 Week High</div>
                    <% let fifty2WkHi="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.fiftyTwoWeekHigh){ %>
                                <% fifty2WkHi=checkSymbol.summaryDetail.fiftyTwoWeekHigh}} %>
                                    <div id="fifty2WkHighData" class="indexData">
                                        <%=fifty2WkHi %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="twoHundDayAvg">200 Day Avg</div>
                    <% let twoHDAvg="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.twoHundredDayAverage){ %>
                                <% twoHDAvg=checkSymbol.summaryDetail.twoHundredDayAverage}} %>
                                    <div id="twoHundDayAvgData" class="indexData">
                                        <%=twoHDAvg %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id='bid'>Bid</div>
                    <% let bid="N/A" %>
                        <% if(checkSymbol.summaryDetail.bid !==undefined){ %>
                            <% bid=checkSymbol.summaryDetail.bid} %>
                                <div id='bidData' class="indexData">
                                    <%=bid %>
                                </div>
                </div>
                <div class="border-line">
                    <div id="ask">Ask</div>
                    <%let ask="N/A" %>
                        <% if(checkSymbol.summaryDetail.ask !==undefined){ %>
                            <% ask=checkSymbol.summaryDetail.ask} %>
                                <div id="askData" class="indexData">
                                    <%=ask %>
                                </div>
                </div>
                <div class="border-line">
                    <div id="beta">Beta</div>
                    <%let beta="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.beta){ %>
                                <% beta=checkSymbol.summaryDetail.beta}} %>
                                    <div id="beta" class="indexData">
                                        <%=beta %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="mktCap">Market Cap</div>
                    <%let mktCap="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.marketCap){ %>
                                <% mktCap=checkSymbol.summaryDetail.marketCap}}%>
                                    <div id="mktCap" class="indexData commas">

                                        <%=mktCap %>
                                    </div>
                </div>
                <div class="border-line">
                    <div id="volume">Volume</div>
                    <%let volume="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.volume){ %>
                                <% volume=checkSymbol.summaryDetail.volume}}%>
                                    <div id="mktVol" class="indexData commas">

                                        <%=volume %>
                                    </div>
                </div>
                <div class="border-line no-border-bottom">
                    <div id="avgVolume">Avg. Volume</div>
                    <%let avgVol="N/A" %>
                        <% if(checkSymbol.summaryDetail){ %>
                            <% if(checkSymbol.summaryDetail.averageVolume){ %>
                                <% avgVol=checkSymbol.summaryDetail.averageVolume}}%>
                                    <div id="avgVol" class="indexData commas">
                                        <%=avgVol %>
                                    </div>
                </div>
            </div>

        </section>
        <section id="slide-container">
            <!-- If we need navigation buttons -->
            <div id="nav-buttons-container">
                <div class="slide-prev chevrons">
                    <img id='left-chev' src="/icons8-back-20.png" alt="left-chevron">
                </div>
                <div class="slide-next chevrons">
                    <img id="right-chev" src="/icons8-forward-20.png" alt="right-chevron">
                </div>
            </div>
            <!-- Slides -->
            <div class="slides-wrapper">
                <div id="income-statement" class="slide">
                    <h6>Income Statement</h6>
                    <div class="annual-label">Annual</div>
                    <div class="slide-boxes">
                        <div class="slide-data-wrapper income-slide-years">
                            <div class="slide-data slide-headers data-align-left currency"></div>
                            <div class="slide-data slide-headers ttm"></div>
                            <div class="slide-data slide-headers year1"></div>
                            <div class="slide-data slide-headers year2"></div>
                        </div>
                        <div class="slide-data-wrapper revenue">
                            <div class="slide-data data-align-left">Revenue</div>
                            <div class="slide-data  ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>
                        <div class="slide-data-wrapper gross-profit">
                            <div class="slide-data data-align-left">Gross profit</div>
                            <div class="slide-data  ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>
                        <div class="slide-data-wrapper operating-expense">
                            <div class="slide-data data-align-left">Operating expense</div>
                            <div class="slide-data  ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>
                        <div class="slide-data-wrapper operating-income">
                            <div class="slide-data data-align-left">Operating income</div>
                            <div class="slide-data  ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>
                        <div class="slide-data-wrapper pre-tax-income">
                            <div class="slide-data data-align-left">Pre tax income</div>
                            <div class="slide-data  ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>
                        <div class="slide-data-wrapper other-income-expense">
                            <div class="slide-data data-align-left">Other income exp</div>
                            <div class="slide-data ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>

                        <div class="slide-data-wrapper basic-eps">
                            <div class="slide-data data-align-left">Basic eps</div>
                            <div class="slide-data  ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>
                        <div class="slide-data-wrapper net-income">
                            <div class="slide-data data-align-left">Net income</div>
                            <div class="slide-data  ttm"></div>
                            <div class="slide-data year1"></div>
                            <div class="slide-data year2"></div>
                        </div>

                    </div>
                </div>
                <div id="balance-sheet" class="slide">
                    <h6>Balance Sheet</h6>
                    <div class="annual-label">Annual</div>
                    <div class="slide-boxes">
                        <div class="slide-data-wrapper slide-years">
                            <div class="slide-data slide-headers data-align-left currency">(USD)</div>
                            <div class="slide-data slide-headers year1">12/31/23</div>
                            <div class="slide-data slide-headers year2">12/31/22</div>
                            <div class="slide-data slide-headers year3">12/31/21</div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Total assets</div>
                            <div class="slide-data">6.53B</div>
                            <div class="slide-data">6.53B</div>
                            <div class="slide-data">3.756B</div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Total liabilities</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Total equity</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Total capitalization</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Total debt</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Net debt</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Shares issued</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                    </div>
                </div>
                <div id="cash-flow" class="slide">
                    <h6>Cash Flow</h6>
                    <div class="annual-label">Annual</div>
                    <div class="slide-boxes">
                        <div class="slide-data-wrapper slide-years">
                            <div class="slide-data slide-headers data-align-left currency">(USD)</div>
                            <div class="slide-data slide-headers ttm">TTM</div>
                            <div class="slide-data slide-headers year1">12/31/23</div>
                            <div class="slide-data slide-headers year2">12/31/22</div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Net income</div>
                            <div class="slide-data">6.53B</div>
                            <div class="slide-data">6.53B</div>
                            <div class="slide-data">3.756B</div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Operating cash flow</div>
                            <div class="slide-data">6.53B</div>
                            <div class="slide-data">6.53B</div>
                            <div class="slide-data">3.756B</div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Investing cash flow</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Financing cash flow</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">End cash flow</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Capital expenditure</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>

                        <div class="slide-data-wrapper">
                            <div class="slide-data data-align-left">Free cash flow</div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                            <div class="slide-data"></div>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </section>
        <div id="summary_profile_container">
            <div id="summary_container">
                <h6>Summary</h6>
                <p id="company_desc">
                    <%let resultLB="" %>
                        <%if(checkSymbol.assetProfile){ %>
                            <%resultLB=checkSymbol.assetProfile.longBusinessSummary}%>
                                <%=resultLB%>
                </p>
            </div>
            <div id="profile_container">
                <% let h="" %>
                    <%if(checkSymbol.assetProfile){ %>
                        <%if(checkSymbol.assetProfile.address1){ %>
                            <% h="Profile" }}%>
                                <h6>
                                    <%=h %>
                                </h6>
                                <div id="profile_container2">
                                    <div id="address_container">
                                        <p id="address">
                                            <%let resultAd="" %>
                                                <%if(checkSymbol.assetProfile){ %>
                                                    <%resultAd=checkSymbol.assetProfile.address1}%>
                                                        <%=resultAd%>
                                        </p>
                                        <div id="city_state_container">
                                            <p id="city">
                                                <%let resultCi="" %>
                                                    <%if(checkSymbol.assetProfile){ %>
                                                        <%resultCi=checkSymbol.assetProfile.city}%>
                                                            <%=resultCi%>
                                            </p>
                                            <p id="state">
                                                <%let resultSt="" %>
                                                    <%if(checkSymbol.assetProfile){ %>
                                                        <%resultSt=checkSymbol.assetProfile.state}%>
                                                            <%=resultSt%>
                                            </p>
                                            <p id="zip">
                                                <%let resultZ="" %>
                                                    <%if(checkSymbol.assetProfile){ %>
                                                        <%resultZ=checkSymbol.assetProfile.zip}%>
                                                            <%=resultZ%>
                                            </p>
                                        </div>

                                        <p id="country">
                                            <%let resultCoun="" %>
                                                <%if(checkSymbol.assetProfile){ %>
                                                    <%resultCoun=checkSymbol.assetProfile.country}%>
                                                        <%=resultCoun%>
                                        </p>
                                        <p id="phone">
                                            <%let resultPh="" %>
                                                <%if(checkSymbol.assetProfile){ %>
                                                    <%resultPh=checkSymbol.assetProfile.phone}%>
                                                        <%=resultPh%>
                                        </p>
                                        <p id="website">
                                            <%let resultWeb="" %>
                                                <%if(checkSymbol.assetProfile){ %>
                                                    <% if(checkSymbol.assetProfile.website){ %>
                                                        <%resultWeb=checkSymbol.assetProfile.website}}%>
                                                            <a href="<%=resultWeb%>" target="_blank">
                                                                <%=resultWeb%>
                                                            </a>


                                        </p>
                                        <p id="industry">
                                            <%let rInd="" %>
                                                <%if(checkSymbol.assetProfile){ %>
                                                    <% if(checkSymbol.assetProfile.industry){%>
                                                        <%rInd=checkSymbol.assetProfile.industry%>
                                                            <% rInd=`Industry: ${rInd}` }}%>
                                                                <%=rInd %>
                                        </p>
                                        <p id="sector">
                                            <%let rSec="" %>
                                                <%if(checkSymbol.assetProfile){ %>
                                                    <% if(checkSymbol.assetProfile.sector){%>
                                                        <%rSec=checkSymbol.assetProfile.sector%>
                                                            <% rSec=`Sector: ${rSec}`}} %>
                                                                <%=rSec%>
                                        </p>
                                    </div>
                                    <div id="key_execs_container">
                                        <ul id="title_name1">
                                            <li>
                                                <% let tit="" %>
                                                    <%if(checkSymbol.assetProfile){ %>
                                                        <% if(checkSymbol.assetProfile.companyOfficers[0]){ %>
                                                            <%tit=`${checkSymbol.assetProfile.companyOfficers[0].title}:`}}%>
                                                                <%=tit%>
                                            </li>
                                            <li>
                                                <% let nam="" %>
                                                    <% if(checkSymbol.assetProfile){ %>
                                                        <% if(checkSymbol.assetProfile.companyOfficers[0]){%>
                                                            <%nam=checkSymbol.assetProfile.companyOfficers[0].name}} %>
                                                                <%= nam %>

                                            </li>
                                            <li></li>
                                        </ul>
                                        <ul id="title_name2">
                                            <li>
                                                <% let tit2="" %>
                                                    <%if(checkSymbol.assetProfile){ %>
                                                        <% if(checkSymbol.assetProfile.companyOfficers[1]){ %>
                                                            <%tit2=`${checkSymbol.assetProfile.companyOfficers[1].title}:`}}%>
                                                                <%=tit2%>
                                            </li>
                                            <li>
                                                <% let nam2="" %>

                                                    <% if(checkSymbol.assetProfile){ %>
                                                        <% if(checkSymbol.assetProfile.companyOfficers[1]){%>
                                                            <%nam2=checkSymbol.assetProfile.companyOfficers[1].name}} %>
                                                                <%= nam2 %>
                                            </li>
                                            <li></li>
                                        </ul>
                                    </div>
                                    <div id="employee_container">
                                        <p>
                                            <% let emH="" %>
                                                <% if(checkSymbol.assetProfile){ %>
                                                    <% if(checkSymbol.assetProfile.fullTimeEmployees){%>
                                                        <%emH="Full Time Employees:"%>
                                                            <% }} %>
                                                                <%=emH%>
                                        </p>
                                        <p>
                                            <% let em="" %>
                                                <% if(checkSymbol.assetProfile){ %>
                                                    <% if(checkSymbol.assetProfile.fullTimeEmployees){%>
                                                        <% em=checkSymbol.assetProfile.fullTimeEmployees}} %>
                                                            <%= em %>
                                        </p>
                                    </div>
                                </div>

            </div>
        </div>
    </section>
    <footer id="ticker_footer">
        <%- include('./partials/footer.ejs') %>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
        const pageUrl = window.location.href;
        localStorage.setItem("url", pageUrl);
        const apiKey = '<%=API_KEY%>';
        const stockTicker = '<%=checkSymbol.price.symbol%>';
        const dividendRate = '<%=checkSymbol.summaryDetail.dividendRate%>'
        const exDivDate = '<%=checkSymbol.summaryDetail.exDividendDate%>'
        let yhooOpenPrice = '<%=checkSymbol.summaryDetail.open%>';
        const stockPriceChange = '<%=checkSymbol.price.regularMarketChange%>';
        const rapidURL = '<%=RAPID%>';
        const mboumQuotes = '<%=MBOUMQUOTES%>';
        const mboumHist = '<%=MBQHIST%>';
        const yahooURL = '<%=YHOOURL%>'
        const yahooURLTail = '<%=YHURLTAIL%>'
        const yahooHost = '<%=YHOOHOST%>'

        const regExp = /[a-zA-Z.^]/;
        const regExNums = /[0-9]/;

        const h2Box = document.querySelector("header>h2");
        const h2ChildNodes = h2Box.childNodes;
        const selection = window.getSelection();
        const pricePctContainers = document.querySelectorAll(".reg_after_hours_container");
        const priceTimeContainer = document.querySelector("#price_time_container");
        const afterHoursContainer = document.querySelector("#after_container");
        const atCloseContainer = document.querySelector("#at_close_container");
        const afterHoursTimeContainer = document.querySelector("#after_hours_time_container");
        const pricesAndPercents = document.querySelectorAll(".price");
        let postMktChangePct = document.querySelector("#after_hours_pct").innerText;
        const summaryProfileContainer = document.querySelector("#summary_profile_container");
        const companyDesc = document.querySelector("#company_desc");
        const ratioContainer = document.querySelector("#ratio-container");
        const prevCloseContainer = document.querySelector("#prev-close-container");
        const indexData = document.querySelectorAll("#index_data_container > div > .border-line > .indexData");
        const dividendData = document.querySelector("#divRateYield-container");
        const chartTimelineContainer = document.querySelector("#chart-timeline-container");
        const canvas = document.querySelector("#chart");

        //slides
        let dataCache = {
        }
        const grabSlidesData = async () => {
            let results;
            const url = `${yahooURL}${stockTicker}${yahooURLTail}`;
            const options = {
                method: 'GET',
                headers: {
                    'X-RapidAPI-Key': `${apiKey}`,
                    'X-RapidAPI-Host': `${yahooHost}`
                }
            };

            try {
                const response = await fetch(url, options);
                results = await response.json();

            } catch (error) {
                console.error(error);
            }

            return results
        }
        const fillInCache = (category, iterableData, ttm = "--") => {
            let count = 1, year = "year";
            for (let i = 0; i < iterableData.length; i++) {
                year = `${year}${count}`;
                if (category === "endingYear") {
                    let asOfDate = iterableData[i].endDate.fmt;
                    if (asOfDate !== undefined) {
                        //fill in formatted dates of statement;
                        asOfDate = new Date(asOfDate);
                        dataCache[year] = new Intl.DateTimeFormat("en-US", {
                            dateStyle: 'short',
                            timeZone: 'UTC',
                        }).format(asOfDate)
                    }

                }

                if (category === "annualTotalRevenue" || category === "annualGrossProfit" || category === "operatingExpense" || category === "operatingIncome"
                    || category === "preTaxIncome" || category === "otherIncomeExpense" || category === "net-income" || category === "basic-eps") {
                    let endObj = iterableData.length - 1;
                    let endIndex = endObj - i;

                    if (endIndex >= 0) {
                        let fmtData = "--";

                        if (iterableData[endIndex] !== null) {
                            fmtData = iterableData[endIndex].reportedValue.fmt;

                            if (!dataCache["currency-code"]) {
                                let currency = iterableData[endIndex].currencyCode;
                                dataCache["currency-code"] = currency;
                            }
                        };

                        dataCache[year] = fmtData;
                    }
                }
                if (ttm !== undefined) {
                    dataCache["ttm"] = ttm;
                }
                count += 1;
                year = "year";
            }
            console.log(dataCache)
        }
        const fillInDataDOM = (wrapper) => {
            for (let j = 0; j < wrapper.length; j++) {
                let currChild = wrapper[j];
                if (dataCache["currency-code"] && !document.querySelector(".slide-data-wrapper > .currency").innerText) {
                    let ccy = dataCache["currency-code"];

                    document.querySelector(".slide-data-wrapper > .currency").innerText = `(${ccy})`;
                }
                if (currChild.classList.contains("ttm")) {
                    currChild.innerText = dataCache["ttm"];
                }
                if (currChild.classList.contains("year1")) {
                    if (!dataCache["year1"]) currChild.innerText = "N/A";

                    currChild.innerText = dataCache["year1"];
                }
                if (currChild.classList.contains("year2")) {
                    if (!dataCache["year2"]) currChild.innerText = "N/A";
                    currChild.innerText = dataCache["year2"];
                }
                if (currChild.classList.contains("year3")) {
                    if (!dataCache["year3"]) currChild.innerText = "N/A";
                    currChild.innerText = dataCache["year3"];
                }
            }
        }

        const incomeStatement = (slidedata) => {
            //gather slide data:
            console.log("slideData:", slidedata);
            //statement ending years:
            let years = slidedata.incomeStatementHistory.incomeStatementHistory;
            //cache data;
            fillInCache("endingYear", years, "TTM");
            //fill in the DOM;
            const incomeSlideYears = document.querySelector(".slide-boxes>.income-slide-years").children;
            fillInDataDOM(incomeSlideYears);

            //revenue:
            let ttmRevenue = slidedata.timeSeries.trailingTotalRevenue[0].reportedValue.fmt;
            let annualRev = slidedata.timeSeries.annualTotalRevenue;
            fillInCache("annualTotalRevenue", annualRev, ttmRevenue);
            const revenueWrapper = document.querySelector(".slide-boxes>.revenue").children;
            fillInDataDOM(revenueWrapper);

            //gross profit
            let ttmGrossProfit = slidedata.timeSeries.trailingGrossProfit[0].reportedValue.fmt;
            let annualGrossProfit = slidedata.timeSeries.annualGrossProfit;
            fillInCache("annualGrossProfit", annualGrossProfit, ttmGrossProfit);
            const grossProfitWrapper = document.querySelector(".slide-boxes > .gross-profit").children;
            fillInDataDOM(grossProfitWrapper);

            //operating expense
            let ttmOperatingExpense = slidedata.timeSeries.trailingOperatingExpense[0].reportedValue.fmt;
            let annualOperatingExpense = slidedata.timeSeries.annualOperatingExpense;
            fillInCache("operatingExpense", annualOperatingExpense, ttmOperatingExpense);
            const operatingExpenseWrapper = document.querySelector(".slide-boxes > .operating-expense").children;
            fillInDataDOM(operatingExpenseWrapper);

            //operating income
            let ttmOperatingIncome = slidedata.timeSeries.trailingOperatingIncome[0].reportedValue.fmt;
            let annualOperatingIncome = slidedata.timeSeries.annualOperatingIncome;
            fillInCache("operatingIncome", annualOperatingIncome, ttmOperatingIncome);
            const operatingIncomeWrapper = document.querySelector(".slide-boxes > .operating-income").children;
            fillInDataDOM(operatingIncomeWrapper);

            //pre-tax income
            let ttmPreTaxIncome = slidedata.timeSeries.trailingPretaxIncome[0].reportedValue.fmt;
            let annualPreTaxIncome = slidedata.timeSeries.annualPretaxIncome;
            fillInCache("preTaxIncome", annualPreTaxIncome, ttmPreTaxIncome);
            const preTaxIncomeWrapper = document.querySelector(".slide-boxes > .pre-tax-income").children;
            fillInDataDOM(preTaxIncomeWrapper);

            //other income expense
            let ttmOtherIncomeExpense = "--";
            if (slidedata.timeSeries.trailingOtherIncomeExpense[0]) {
                ttmOtherIncomeExpense = slidedata.timeSeries.trailingOtherIncomeExpense[0].reportedValue.fmt;
            }

            let annualOtherIncomeExpense = slidedata.timeSeries.annualOtherIncomeExpense;
            fillInCache("otherIncomeExpense", annualPreTaxIncome, ttmOtherIncomeExpense);
            const otherIncomeExpenseWrapper = document.querySelector(".slide-boxes > .other-income-expense").children;
            fillInDataDOM(otherIncomeExpenseWrapper);

            //basic eps
            let ttmBasicEPS = slidedata.timeSeries.trailingBasicEPS[0].reportedValue.fmt;
            let annualBasicEps = slidedata.timeSeries.annualBasicEPS;
            fillInCache("basic-eps", annualBasicEps, ttmBasicEPS);
            const basicEpsWrapper = document.querySelector(".slide-boxes > .basic-eps").children;
            fillInDataDOM(basicEpsWrapper);

            //net income
            let ttmNetIncome = slidedata.timeSeries.trailingNetIncome[0].reportedValue.fmt;
            let annualNetIncome = slidedata.timeSeries.annualNetIncome;
            fillInCache("net-income", annualNetIncome, ttmNetIncome);
            const netIncomeWrapper = document.querySelector(".slide-boxes > .net-income").children;
            fillInDataDOM(netIncomeWrapper);

        }
        const populateSlides = async () => {
            const slideContainer = document.querySelector("#slide-container");
            //populate date headings
            let slideData = await grabSlidesData();
            //check keys;
            let keys = Object.keys(slideData);
            if (keys.length === 0) {
                slideContainer.style.display = "none";
            } else {
                incomeStatement(slideData);
            }

        }

        const slidesWrapper = document.querySelector('.slides-wrapper');
        const slides = Array.from(document.querySelectorAll(".slide"));
        const slideNavChevrons = Array.from(document.querySelectorAll(".chevrons"));
        //starting variables;
        let isDragging = false, startPosition = 0, currTranslateX = 0, prevTranslateX = 0, animationId = 0, currSlideIndex = 0;
        slides.forEach((slide, index) => {
            //touch events
            slide.addEventListener('touchstart', touchStart(index))
            slide.addEventListener('touchend', touchEnd);
            slide.addEventListener('touchmove', touchMove)
            //mouse events
            slide.addEventListener('mousedown', touchStart(index))
            slide.addEventListener('mouseup', touchEnd)
            slide.addEventListener('mouseleave', touchEnd)
            slide.addEventListener('mousemove', touchMove)
        })

        slideNavChevrons.forEach((chevron) => {
            chevron.addEventListener("click", () => {
                //next button
                let chevronDirection = chevron.classList.contains("slide-next");
                isDragging = true;
                animationId = requestAnimationFrame(animation);
                if (chevronDirection) {
                    if (currSlideIndex < slides.length - 1) {
                        currSlideIndex += 1
                    }
                }

                //prev button
                if (!chevronDirection) {
                    if (currSlideIndex > 0) {
                        currSlideIndex -= 1;
                    }
                }


                isDragging = false;
                cancelAnimationFrame(animationId);
                setPostionByIndex()
            })
        })

        function touchStart(index) {
            return function (event) {
                currSlideIndex = index;
                startPosition = getPositionX(event);
                console.log("startPosition aka getPositionX:", startPosition)
                isDragging = true;
                animationId = requestAnimationFrame(animation);
                slidesWrapper.style.cursor = "grabbing";
            }
        }

        function touchEnd() {
            isDragging = false;
            cancelAnimationFrame(animationId);
            const movedBy = currTranslateX - prevTranslateX;
            console.log("movedBy:", movedBy);


            if (movedBy < -100 && currSlideIndex < slides.length - 1) {
                currSlideIndex += 1
                console.log("currSlideIndex:", currSlideIndex);
            }
            if (movedBy > 100 && currSlideIndex > 0) currSlideIndex -= 1;
            setPostionByIndex()
            slidesWrapper.style.cursor = "grab";
        }

        function touchMove(event) {
            if (isDragging) {
                const currentPosition = getPositionX(event)
                currTranslateX = prevTranslateX + currentPosition - startPosition;
                console.log("currTranslateX:", currTranslateX)
            }
        }

        function getPositionX(event) {
            return event.type.includes("mouse") ? event.pageX : event.touches[0].clientX;
        }

        function animation() {
            setSliderPosition()
            if (isDragging) requestAnimationFrame(animation)
        }

        function setSliderPosition() {
            slidesWrapper.style.transform = `translateX(${currTranslateX}%)`;
        }

        function setPostionByIndex() {
            currTranslateX = currSlideIndex * -105;
            prevTranslateX = currTranslateX;
            setSliderPosition()
        }

        let currMktState, timeout = undefined, timeout2 = undefined, dataLineColor;

        const setMarketTime = (timeStamp) => {
            let date, sessionTime, formatted;
            const timeStampCheck = Number(timeStamp);

            //yahoo time
            if (!timeStampCheck) {
                date = new Date(`${timeStamp}`);
            }

            //epoch time given by rapidapi,
            if (timeStampCheck) {
                date = new Date(timeStamp * 1000);
            }


            formatted = new Intl.DateTimeFormat('en-US', {
                dateStyle: 'short',
                timeStyle: 'long',
                timeZone: 'UTC',
            }).format(date)


            return formatted

        }
        const changePctPointsColor = (pricePctContainers, pricechange) => {

            let regExMinus = new RegExp(/[-]/);
            let regExParens = new RegExp(/[()]/);
            let regExPlus = new RegExp(/[+]/);
            for (let i = 0; i < pricePctContainers.length; i++) {
                let priceString = pricePctContainers[i].children[0].innerText;
                let pointsText = pricePctContainers[i].children[1].children[0].innerText;
                let percentText = pricePctContainers[i].children[1].children[1].innerText

                if (regExMinus.test(pointsText)) {
                    pricePctContainers[i].children[0].style.color = "#b11e31";
                    pricePctContainers[i].children[1].children[0].style.color = "#b11e31";
                    pricePctContainers[i].children[1].children[1].style.color = "#b11e31";

                    if (regExParens.test(percentText) !== true) {
                        pricePctContainers[i].children[1].children[1].innerText = `(${percentText}%)`
                    }
                } else {
                    pricePctContainers[i].children[0].style.color = "#148a61";
                    pricePctContainers[i].children[1].children[0].style.color = "#148a61";
                    pricePctContainers[i].children[1].children[1].style.color = "#148a61";

                    if (regExPlus.test(pointsText) !== true) {
                        pricePctContainers[i].children[1].children[0].innerText = `+${pointsText}`
                    }

                    if (regExParens.test(percentText) !== true) {
                        pricePctContainers[i].children[1].children[1].innerText = `(+${percentText}%)`
                    }
                }
            }
            dataLineColor = pricePctContainers[0].children[1].children[0].style.color
        };
        const formatPrice = (container) => {

            for (let ele of container) {
                let formatted;
                let formatNum = ele.innerText;

                //check for ex-dividend element;
                const exDivCheck = ele.classList.contains("exDivDate");
                const divRate = ele.classList.contains("div-rate");
                const commaClass = ele.classList.contains("commas");
                if (formatNum !== "N/A" && !exDivCheck && !divRate) {

                    formatted = new Intl.NumberFormat("en-US", {
                        style: "decimal",
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2,
                    }).format(formatNum);

                }

                if (divRate) {
                    formatted = "N/A";
                    if (dividendRate) {
                        formatNum = dividendRate;
                        formatted = new Intl.NumberFormat("en-US", {
                            style: "decimal",
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2,
                        }).format(formatNum);
                    }
                }

                if (exDivCheck) {
                    formatted = "N/A";
                    if (dividendRate) {
                        formatNum = dividendRate;
                        formatted = new Intl.NumberFormat("en-US", {
                            style: "decimal",
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2,
                        }).format(formatNum);
                    }
                    if (exDivDate) {
                        let date = new Date(exDivDate);
                        formatted = new Intl.DateTimeFormat("en-US", { dateStyle: "medium", timeZone: "UTC" }).format(date);
                    }
                }

                if (commaClass && formatNum !== "N/A") {
                    let regExpComma = /,/g;
                    //how many commas are there?
                    let commas = formatted.match(regExpComma);

                    //get the index of the first comma;
                    let commaIndex = formatted.search(regExpComma);
                    //turn the comma into a decimal if needed;
                    // let firstCommaChar = formatted.charAt(commaIndex);

                    //get index of next comma;
                    //make it the endIndex;

                    let str;
                    let startIndex = 0;

                    if (commas.length === 4) {
                        str = formatted.slice(startIndex, commaIndex);
                        formatted = `${str}T`
                    }

                    if (commas.length === 3) {
                        str = formatted.slice(startIndex, commaIndex);
                        formatted = `${str}B`
                    }

                    if (commas.length === 2) {
                        str = formatted.slice(startIndex, commaIndex);
                        formatted = `${str}M`
                    }

                }

                if (!formatted) formatted = "N/A";
                ele.innerText = formatted;
            }
            return
        };
        const getRapidPrices = async (api, symbol) => {
            const url = `${mboumQuotes}${symbol}`;
            const options = {
                method: "GET",
                headers: {
                    "X-RapidAPI-Key": api,
                    "X-RapidAPI-Host": rapidURL,
                },
            };

            const response = await fetch(url, options).then((data) => { return data; }).catch((e) => console.log(e));
            const result = await response.json();
            const marketState = result.body[0].marketState;
            const regMarketTime = result.body[0].regularMarketTime;
            const preMarketTime = result.body[0].preMarketTime;
            const postMarketTime = result.body[0].postMarketTime;

            console.log(result.body[0]);

            let regMktState = "Last Closed:", regMktPrice, regMktChange, regMktChangePercent,
                mktStatePrice, mktStateChange, mktStateChangePct, extendedMkTime, mktState;

            regMktPrice = result.body[0].regularMarketPrice;
            regMktChange = result.body[0].regularMarketChange;
            regMktChangePercent = result.body[0].regularMarketChangePercent;
            currMktState = marketState // update global variable for chartjs

            if (marketState === "REGULAR") regMktState = "Current Session:";
            //reg hours
            priceTimeContainer.children[0].children[0].children[0].innerText = regMktPrice;
            priceTimeContainer.children[0].children[0].children[1].children[0].innerText = regMktChange;
            priceTimeContainer.children[0].children[0].children[1].children[1].innerText = regMktChangePercent;
            if (regMarketTime) {
                atCloseContainer.children[0].innerText = regMktState;
                atCloseContainer.children[1].innerText = setMarketTime(regMarketTime);
            }

            if (result.body[0].postMarketPrice) {
                mktState = "After Hours:";
                mktStatePrice = result.body[0].postMarketPrice;
                mktStateChange = result.body[0].postMarketChange;
                mktStateChangePct = result.body[0].postMarketChangePercent;
                extendedMkTime = postMarketTime;
            }

            if (result.body[0].preMarketPrice) {
                mktState = "Pre-Market Hours:";
                mktStatePrice = result.body[0].preMarketPrice;
                mktStateChange = result.body[0].preMarketChange;
                mktStateChangePct = result.body[0].preMarketChangePercent;
                extendedMkTime = preMarketTime;
            }

            //extended hours
            priceTimeContainer.children[1].children[0].children[0].innerText = mktStatePrice;
            priceTimeContainer.children[1].children[0].children[1].children[0].innerText = mktStateChange;
            priceTimeContainer.children[1].children[0].children[1].children[1].innerText = mktStateChangePct;
            afterHoursTimeContainer.children[0].innerText = mktState;
            afterHoursTimeContainer.children[1].innerText = setMarketTime(extendedMkTime);

            return;
        };
        const yahooSetMktTime = () => {
            const yf2PrePrice = '<%=checkSymbol.price.preMarketPrice%>'
            let preTime = '<%=checkSymbol.price.preMarketTime%>'
            const yf2PostPrice = '<%=checkSymbol.price.postMarketPrice%>'
            let postTime = '<%=checkSymbol.price.postMarketTime%>'
            const regMktPrice = '<%=checkSymbol.price.regularMarketPrice%>'
            const regTime = '<%=checkSymbol.price.regularMarketTime%>';
            const marketStateYahoo = '<%=checkSymbol.price.marketState%>';
            let mktState, regDateTime = "Last Closed:", dateAndTime;

            currMktState = marketStateYahoo; //updates global variable for chartsjs

            if (marketStateYahoo === "REGULAR") {
                regDateTime = "Current Session:";
            }

            if (marketStateYahoo === "PRE" || marketStateYahoo === "PREPRE") {

                if (postTime) {
                    mktState = "After Hours:";
                    dateAndTime = postTime;
                }

                if (preTime) {
                    mktState = "Pre-Market Hours:";
                    dateAndTime = preTime;
                }

            }

            if (marketStateYahoo === "POST" || marketStateYahoo === "POSTPOST" || marketStateYahoo === "CLOSED") {
                if (postTime) {
                    mktState = "After Hours:";
                    dateAndTime = postTime;
                }
            }

            atCloseContainer.children[0].innerText = regDateTime;
            atCloseContainer.children[1].innerText = setMarketTime(regTime);

            if (!dateAndTime) {
                afterHoursContainer.style.display = "none";
            } else {
                afterHoursTimeContainer.children[0].innerText = mktState;
                afterHoursTimeContainer.children[1].innerText = setMarketTime(dateAndTime);
            }

            if (companyDesc.innerText === "") {
                summaryProfileContainer.style.display = "none";
                ratioContainer.style.display = "none";
                prevCloseContainer.style.maxWidth = "100%";
            }
        }
        const mboumHistPrices = async (sym, interval, mboumhist = mboumHist, rapidurl = rapidURL, apikey = apiKey) => {
            let result
            const url = `${mboumhist}?symbol=${sym}&interval=${interval}&diffandsplits=false`;
            const options = {
                method: 'GET',
                headers: {
                    'X-RapidAPI-Key': `${apikey}`,
                    'X-RapidAPI-Host': `${rapidurl}`
                }
            };

            try {
                const response = await fetch(url, options);
                result = await response.json();
            } catch (error) {
                console.error(error);
            }
            return result
        }
        const fillChartData = async (mktstatus, ticker, interval) => {
            //5m:1day, 1h:5days;
            //1d:months, 1mo:years;
            let chartData = {
                "5m": {},
                "1h": {},
                "1d": {},
                "1mo": {}
            };

            chartData[interval] = {
                datasets: [{
                    label: "", data: [],
                    borderColor: dataLineColor,
                    backgroundColor: dataLineColor,
                    color: dataLineColor,
                    tension: 0.1,
                    pointBorderWidth: .5
                }],
                labels: []
            };

            const histPrices = await mboumHistPrices(ticker, interval);
            console.log("histPrices", histPrices)

            const responseBody = histPrices.body;
            const responseMeta = histPrices.meta;
            //Iterate over body, start from the last one, go backwards;
            const keys = Object.keys(responseBody);

            //depending on the interval, return necessary data object;
            //start from the last one and go backwards;
            for (let i = keys.length - 1; i >= 0; --i) {
                let key = keys[i];
                let prevKey = keys[i - 1];

                let curr = responseBody[key];
                let mboumDate = curr.date_utc;
                mboumDate = new Date(mboumDate * 1000);
                let mboumGetDate = mboumDate.getUTCDate();
                let currHours = mboumDate.getUTCHours();
                let currMin = mboumDate.getUTCMinutes();

                let mktPrice;

                let prev = responseBody[prevKey];
                if (prev === undefined) return chartData[interval];
                let mboumPrevDate = prev.date_utc;
                mboumPrevDate = new Date(mboumPrevDate * 1000);
                let mboumPrevGetDate = mboumPrevDate.getUTCDate();

                mktPrice = curr.close;

                //market open
                if (currHours === 13 && currMin === 30) {

                    //get opening price;
                    mktPrice = yhooOpenPrice
                    // mktPrice = curr.open;
                }

                let utcTime = setMarketTime(curr.date_utc)

                if (mktPrice) {
                    chartData[interval].datasets[0].data.unshift(mktPrice);
                    chartData[interval].labels.unshift(utcTime);
                }

                if (interval === "5m") {
                    if (mboumGetDate !== mboumPrevGetDate) {
                        return [chartData[interval]]
                    }
                }
                if (interval === "1h") {
                    let count = 5;
                    //if date is more than 5 days prior
                    //if final prevUtcDate is more than 5 days prior to original CurrUtcDate;
                    //return chart
                    //check for weekends.

                }


            }
        }
        let chart;
        const runHistPrices = async (mktstat, sym, int) => {
            //5m/1day, 1hr/5d, put prices at respective intervals
            //1d/months, 1month/years; put closing price for days;
            let result = await Promise.all([fillChartData(mktstat, sym, int)]);

            let chartData = result[0][0];

            const options = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: false,
                        grid: {
                            display: true,
                            color: "black"
                        }
                    },
                    x: {
                        display: true,
                        grid: {
                            display: false
                        },
                        ticks: {
                            major: {
                                enabled: true
                            },
                            callback: (index) => {
                                let label = chartData.labels[index]
                                let whiteSpace = label.indexOf(" ");
                                let timeLabel = label.slice(whiteSpace + 1);

                                if (timeLabel === "12:00:00 AM UTC" || timeLabel === "3:00:00 AM UTC" || timeLabel === "6:00:00 AM UTC" || timeLabel === "9:00:00 AM UTC" || timeLabel === "12:00:00 PM UTC" || timeLabel === "3:00:00 PM UTC" || timeLabel === "6:00:00 PM UTC" || timeLabel === "9:00:00 PM UTC") {
                                    let str1, str2, labelStr;
                                    str1 = timeLabel.slice(0, 1);
                                    if (timeLabel === "12:00:00 PM UTC" || timeLabel === "12:00:00 AM UTC") {
                                        str1 = timeLabel.slice(0, 2);
                                    }

                                    str2 = timeLabel.slice(-6);
                                    labelStr = `${str1} ${str2}`

                                    return labelStr
                                }

                            }

                        },
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                },
                animations: {
                    radius: {
                        duration: 600,
                        easing: 'linear',
                        loop: true,
                        radius: 1,
                        backgroundColor: dataLineColor
                    }
                },

                interaction: {
                    mode: 'nearest',
                    intersect: false,
                    axis: 'x'
                }
            }

            const config = {
                type: "line",
                data: chartData,
                options: options
            }
            if (chart) chart.destroy();
            chart = new Chart(canvas, config);

            return
        }
        const idlePage = () => {
            if (timeout) {
                clearInterval(timeout);
            }
            timeout = setInterval(() => {
                location.reload();
            }, 60000);
        }
        const activePage = () => {
            if (timeout2) clearInterval(timeout2);
            timeout2 = setTimeout(async () => {
                await getRapidPrices(apiKey, stockTicker);
                formatPrice(pricesAndPercents);
                changePctPointsColor(pricePctContainers);
                console.log("active");
            }, 180000);
        }

        const setEventListeners = () => {

            //timeline links: 1d 5d ytd 1y 3yr

            let timelineLinks = chartTimelineContainer.children
            for (let i = 0; i < timelineLinks.length; i++) {
                let curr = timelineLinks[i];
                let interval;
                if (curr.classList.contains("oneDay")) interval = "5m";
                if (curr.classList.contains("fiveDay")) interval = "1h";
                if (curr.classList.contains("oneMonth")) interval = "1d";
                if (curr.classList.contains("ytd")) interval = "1mo";
                if (curr.classList.contains("threeYr")) interval = "1mo";

                curr.addEventListener("click", async () => {
                    await runHistPrices(currMktState, stockTicker, interval);
                    console.log("timeline clicked", interval)
                });
            }

            //document.addEventListener("click", idlePage);
            //document.addEventListener("keypress", idlePage);
            //document.addEventListener("mousemove", idlePage);
            //document.addEventListener("scroll", idlePage);

            h2Box.addEventListener("focus", () => {
                const h2ChildNodes = h2Box.childNodes;
                const selection = window.getSelection();
                if (h2Box.innerText === "Enter ticker...") {
                    h2Box.innerText = "";
                }
                //set caret position after text node
                if (h2ChildNodes.length > 0) {
                    selection.setPosition(h2ChildNodes[0], h2ChildNodes[0].length);
                } else {
                    selection.setPosition(h2Box, 0);
                }

                return;
            });
            h2Box.addEventListener("focusout", () => {
                if (h2Box.innerText === "") h2Box.innerText = "Enter ticker...";
                if (h2Box.style.backgroundColor === "#15192f") {
                    h2Box.style.backgroundColor === "#012c12";
                }
            });
            h2Box.addEventListener("keydown", (e) => {
                const textString = h2Box.innerText;
                if (textString.length >= 5 && e.key !== "Backspace" && e.key !== "Enter") {
                    e.preventDefault();
                    alert("Character amount exceeded");
                }
                //prevent navigation keys;
                if (textString.length > 0) {
                    let navKeys = [
                        "ArrowLeft",
                        "ArrowRight",
                        "ArrowDown",
                        "ArrowUp",
                        "Left",
                        "Right",
                        "Up",
                        "Down",
                        "Home",
                        "End",
                        "Del",
                        "Delete",
                        "PageUp",
                        "PageDown",
                        "Insert",
                    ];

                    for (const ele of navKeys) {
                        if (e.key === ele) {
                            e.preventDefault();
                            alert("Invalid entry");
                        }
                    }

                    if (textString === "" && e.key === "Enter") {
                        e.preventDefault();
                        alert("enter a valid ticker");
                    }

                    if (e.key === "Enter" && textString !== "") {
                        //enter the ticker string into the url parameter
                        //grab the URL;
                        const url = `http://localhost:3000/tickrpro/${textString}`
                        console.log(url, typeof url)
                        //check ticker string
                        window.location.href = url;
                    }
                }
                //prevent non-letters
                //Allow Backspace, Enter keys;
                //Note: navigation keys are failing the regexp test;
                if (regExp.test(e.key) === false) {
                    if (e.key !== "Backspace" && e.key !== "Enter") {
                        e.preventDefault();
                        alert("Invalid entry");
                    }
                }
            });

        }

        h2Box.focus();
        ratioContainer.removeAttribute("style");
        afterHoursContainer.removeAttribute("style");
        summaryProfileContainer.removeAttribute("style");

        yahooSetMktTime();
        formatPrice(indexData);
        formatPrice(pricesAndPercents);
        changePctPointsColor(pricePctContainers, stockPriceChange);
        runHistPrices(currMktState, stockTicker, "5m");
        setEventListeners();
        populateSlides();
        //idlePage()
        //activePage();
    </script>

</body>

</html>